
@using ERP.Web.UI.Controllers.PmPropertiesModule
@using ERP.Web.UI.Models.ViewModels.Accounts
@using ERP.Web.UI.Models.ViewModels.PmPropertiesModule
@{
    ViewBag.Title = ERP.ResourcePack.PmPropertiesModule.FmContracts.Title;

    string formTrigger = ViewBag.trigger;
    long? id = ViewData["Id"] == null ? null : (long?)Convert.ToInt32(ViewData["Id"]);
    bool isFormDetail = Model != null && formTrigger == ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString();

    var detailObj = ViewData["DetailAsync"] == null ? null : ViewData["DetailAsync"] as FmContractsVM;

    string lang = Request.Cookies["Lang"] == null ? "ar-EG" : Request.Cookies["Lang"].Value.ToString();

    string lkpKeyDdl = lang == "ar-EG" ? nameof(FndLookupValuesVM.NameAr) : nameof(FndLookupValuesVM.NameEn);




}
@using ERP.Web.UI.Models.ViewModels.General
@model FmContractsVM

<div class="card">
     
    <div class="body">
        <div class="header">
            <h2><strong>@ERP.ResourcePack.PmPropertiesModule.FmContracts.Title</strong></h2>
        </div>


        @using (Ajax.BeginForm(nameof(ERP.Web.UI.Controllers.PmPropertiesModule.FmContractsController.PostFmContracts), "FmContracts", new AjaxOptions { HttpMethod = "POST", OnBegin = "OnBegin", OnSuccess = "OnSuccess", OnComplete = "OnComplete", OnFailure = "OnFailure" }, new { @id = "mainForm" }))
        {
            @Html.HiddenFor(z => z.Id)
            @Html.HiddenFor(z => z.ListFmContractVisitsStr)
            @Html.HiddenFor(z => z.ListFmBuildingsContractsStr)


            @Html.HiddenFor(z => z.codeComUtilityIds)
            @Html.HiddenFor(z => z.codeComUtilityTexts)

            @Html.HiddenFor(z => z.codeComUtilityIds_alt1)
            @Html.HiddenFor(z => z.codeComUtilityTexts_alt1)


            <div class="row clearfix">
                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">

                            @if (Model != null)
                            {
                                @Html.TextBoxFor(z => z.StatusLkpValue, getHtmlAttributes(true, "form-control", string.Empty))

                            }
                            else
                            {
                                <input disabled type="text" class="form-control" name="StatusLkpValue" value="جديد" />

                            }
                            @Html.LabelFor(z => z.StatusLkpValue, new { @class = "form-label" })
                        </div>
                    </div>
                </div>



                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">

                            @Html.TextBoxFor(z => z.ContractNumber, getHtmlAttributes(true, "form-control", string.Empty))
                            @Html.LabelFor(z => z.ContractNumber, new { @class = "form-label" })

                        </div>
                    </div>
                </div>


                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">

                            @Html.TextBoxFor(z => z.ContractDate, getHtmlAttributes(isFormDetail, "form-control datepicker", string.Empty))
                            @Html.LabelFor(z => z.ContractDate, new { @class = "form-label" })

                        </div>
                    </div>
                </div>


                <div class="col-sm-3">
                    @Html.LabelFor(z => z.PaymentTypeLkpId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.PaymentTypeLkpId != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.PaymentTypeLkpId, NameAr = Model.PaymentTypeLkpValue, NameEn = Model.PaymentTypeLkpValue } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.PaymentTypeLkpId);

                                @Html.DropDownListFor(z => z.PaymentTypeLkpId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.PaymentTypeLkpId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }

                        </div>
                        @Html.ValidationMessageFor(z => z.PaymentTypeLkpId)
                    </div>
                </div>


                <div class="col-sm-3">
                    @Html.LabelFor(z => z.VendorId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.VendorId != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.VendorId, NameAr = Model.VendorValue, NameEn = Model.VendorValue } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.VendorId);

                                @Html.DropDownListFor(z => z.VendorId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.VendorId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }

                        </div>
                        @Html.ValidationMessageFor(z => z.VendorId)
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">

                            @Html.TextBoxFor(z => z.VendorContractNumber, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            @Html.LabelFor(z => z.VendorContractNumber, new { @class = "form-label" })

                        </div>
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">

                            @Html.TextBoxFor(z => z.StartDate, getHtmlAttributes(isFormDetail, "form-control datepicker", string.Empty))
                            @Html.LabelFor(z => z.StartDate, new { @class = "form-label" })

                        </div>
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">

                            @Html.TextBoxFor(z => z.EndDate, getHtmlAttributes(isFormDetail, "form-control datepicker", string.Empty))
                            @Html.LabelFor(z => z.EndDate, new { @class = "form-label" })

                        </div>
                    </div>
                </div>



                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">

                            @Html.TextBoxFor(z => z.AnnualAmount, getHtmlAttributes(isFormDetail, "form-control currency", "typenumber"))
                            @Html.LabelFor(z => z.AnnualAmount, new { @class = "form-label" })

                        </div>
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">

                            @*@Html.TextBoxFor(z => z.RentAmount, getHtmlAttributes(true, "form-control ", string.Empty))*@

                            @Html.HiddenFor(z => z.RentAmount)

                            @if (Model != null)
                            {
                                <input class="form-control currency"  disabled name="RentAmount0" id="RentAmount0" value="@Model.RentAmount" />

                            }
                            else
                            {
                                <input class="form-control currency"  disabled name="RentAmount0" id="RentAmount0" value="0" />

                            }






                            @Html.LabelFor(z => z.RentAmount, new { @class = "form-label" })

                        </div>
                    </div>
                </div>

                <div class="col-sm-12">
                    <div class="form-group form-float">
                        <div class="form-line">

                            @Html.TextAreaFor(z => z.Comments, getHtmlAttributes(isFormDetail, "form-control ", string.Empty))
                            @Html.LabelFor(z => z.Comments, new { @class = "form-label" })

                        </div>
                    </div>
                </div>



            </div>


            <div class="border-apply" id="AccountId_" style="padding:0rem 1rem;margin:1rem">
                <div class="header d-flex justify-content-start align-items-center p-0">
                    <i class="fas fa-2x fa-chevron-down down-arr mr-2" data-toggle="collapse" data-target="#AccountId"></i>
                    <p class="m-0">@ERP.ResourcePack.PmPropertiesModule.FmContracts.AccountId</p>
                    <hr />
                </div>
                <div class="collapse show" id="AccountId">
                    <div class="row">

                        @Html.Action(nameof(ERP.Web.UI.Controllers.Accounts.GlAccDetailsController.DrawGlAccController), "GlAccDetails",
                       new { glAccHeadersVMs = ViewData["ListGlAccHeadersVM"] == null ? new List<GlAccHeadersVM>() : ViewData["ListGlAccHeadersVM"] as List<GlAccHeadersVM>, repeatTrigger = "" })


                    </div>
                </div>
            </div>






            <div class="border-apply" id="AdvAccountId_" style="padding:0rem 1rem;margin:1rem">
                <div class="header d-flex justify-content-start align-items-center p-0">
                    <i class="fas fa-2x fa-chevron-down down-arr mr-2" data-toggle="collapse" data-target="#AdvAccountId"></i>
                    <p class="m-0">@ERP.ResourcePack.PmPropertiesModule.FmContracts.AdvAccountId</p>
                    <hr />
                </div>
                <div class="collapse show" id="AdvAccountId">
                    <div class="row">
                        @Html.Action(nameof(ERP.Web.UI.Controllers.Accounts.GlAccDetailsController.DrawGlAccController), "GlAccDetails",
                                 new { glAccHeadersVMs = ViewData["ListGlAccHeadersVM"] == null ? new List<GlAccHeadersVM>() : ViewData["ListGlAccHeadersVM"] as List<GlAccHeadersVM>, repeatTrigger = "adv" })
                    </div>
                </div>
            </div>






        }






    </div>







</div>

@functions {
    object getHtmlAttributes(bool Disabled, string CssClass, string CssClass2)
    {
        if (Disabled)
        {
            return new { @class = CssClass, Disabled = Disabled };
        }
        return new { @class = $"{CssClass} {CssClass2}" };
    }
}

