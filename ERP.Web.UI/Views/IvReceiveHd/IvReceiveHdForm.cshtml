@using ERP.Web.UI.Models.ViewModels.Warehouses
@using ERP.Web.UI.Models.ViewModels.General
@model IvReceiveHdVM
@{
    ViewBag.Title = ERP.ResourcePack.Warehouses.IvReceiveHd.Title;
    string formTrigger = ViewBag.trigger;
    string lang = Request.Cookies["Lang"] == null ? "ar-EG" : Request.Cookies["Lang"].Value.ToString();
    string lkpKeyDdl = lang == "ar-EG" ? nameof(FndLookupValuesVM.NameAr) : nameof(FndLookupValuesVM.NameEn);
    bool isFormDetail = Model != null && formTrigger == ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString();
}
<div class="card">
    <div class="body">
        <div class="header">
            <h2><strong>@ERP.ResourcePack.Accounts.GlJeHeaders.MasterData</strong></h2>
        </div>
        @using (Ajax.BeginForm(nameof(ERP.Web.UI.Controllers.Warehouses.IvReceiveHdController.PostIvReceiveHd), "IvReceiveHd", new AjaxOptions { HttpMethod = "POST", OnBegin = "OnBegin", OnSuccess = "OnSuccess", OnComplete = "OnComplete", OnFailure = "OnFailure" }, new { @id = "mainForm" }))
        {
            @Html.HiddenFor(z => z.Id)
            @Html.HiddenFor(z => z.ListIvReceiveDetailsStr)
            @Html.HiddenFor(z => z.FndTaxtypeId)
            @Html.HiddenFor(z => z.Percentage)
            <div class="row clearfix">
                <div class="col-sm-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.HdReceiveNumber, getHtmlAttributes(true, "form-control", string.Empty))
                            @Html.LabelFor(z => z.HdReceiveNumber, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.HdReceiveDate, getHtmlAttributes(isFormDetail, "form-control", "datepicker"))
                            @Html.LabelFor(z => z.HdReceiveDate, new { @class = "form-label label-required" })
                        </div>
                        @Html.ValidationMessageFor(z => z.HdReceiveDate)
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @if (Model == null || Model.FndStatusLkp == null)
                            {
                                @Html.TextBoxFor(z => z.Status, getHtmlAttributes(true, "form-control", string.Empty))
                                @Html.LabelFor(z => z.StatusLkpId, new { @class = "form-label" })
                            }
                            else if (lang == "ar-EG")
                            {
                                @Html.TextBoxFor(z => z.FndStatusLkp.NameAr, getHtmlAttributes(true, "form-control", string.Empty))
                                @Html.LabelFor(z => z.StatusLkpId, new { @class = "form-label" })
                            }
                            else
                            {
                                @Html.TextBoxFor(z => z.FndStatusLkp.NameEn, getHtmlAttributes(true, "form-control", string.Empty))
                                @Html.LabelFor(z => z.StatusLkpId, new { @class = "form-label" })
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-sm-4">
                    @Html.LabelFor(z => z.IvWarehouseId, new { @class = "form-label label-required" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.IvWarehouses != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.IvWarehouseId, NameAr = Model.IvWarehouses.WarehouseName } };
                                var selectList = new SelectList(list, "Id", nameof(FndLookupValuesVM.NameAr), Model.IvWarehouseId);

                                @Html.DropDownListFor(z => z.IvWarehouseId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.IvWarehouseId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.IvWarehouseId)
                    </div>
                </div>
                <div class="col-md-4">
                    @Html.LabelFor(z => z.CurrencyId, new { @class = "form-label label-required" })
                    <div class="form-group form-float">
                        <div class="form-line">
                            @if (Model != null && Model.Currency != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.CurrencyId, NameAr = Model.Currency.DescriptionAr, NameEn = Model.Currency.DescriptionEn } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.CurrencyId);

                                @Html.DropDownListFor(z => z.CurrencyId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.CurrencyId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                    </div>
                    @Html.ValidationMessageFor(z => z.CurrencyId)
                </div>
                <div class="col-md-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.CurrencyRate, new { @class = "form-control", @readonly = "readonly", @tabindex = "-1", @style = "pointer-events: none;" })
                            @Html.LabelFor(z => z.CurrencyRate, new { @class = "form-label", @style = "pointer-events: none;" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-sm-4">
                    @Html.LabelFor(z => z.VendorId, new { @class = "form-label label-required" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.ApVendors != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.VendorId, NameAr = Model.ApVendors.VendorNameAr, NameEn = Model.ApVendors.VendorNameEn } };
                                var selectList = new SelectList(list, "Id", nameof(FndLookupValuesVM.NameAr), Model.VendorId);

                                @Html.DropDownListFor(z => z.VendorId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.VendorId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.VendorId)
                    </div>
                </div>
                @*<div class="col-md-4">
            @Html.LabelFor(z => z.ReceiveTypeLkpId, new { @class = "form-label label-required" })
            <div class="form-group form-float">
                <div class="form-line">
                    @if (Model != null && Model.FndReceiveTypeLkp != null)
                    {
                        var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.ReceiveTypeLkpId, NameAr = Model.FndReceiveTypeLkp.NameAr, NameEn = Model.FndReceiveTypeLkp.NameEn } };
                        var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.ReceiveTypeLkpId);

                        @Html.DropDownListFor(z => z.ReceiveTypeLkpId, selectList, getHtmlAttributes(formTrigger != ERP.Front.Helpers.Enums.Common.FormTriggers.Insert.ToString(), "form-control", string.Empty))
                    }
                    else
                    {
                        @Html.DropDownListFor(z => z.ReceiveTypeLkpId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                    }
                </div>
            </div>
            @Html.ValidationMessageFor(z => z.ReceiveTypeLkpId)
        </div>*@
                <div class="col-md-4">
                    @Html.LabelFor(z => z.PoPurchaseOrderHdId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="form-line">
                            @if (Model != null && Model.PoPurchaseOrderHd != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.PoPurchaseOrderHdId, NameAr = Model.PoPurchaseOrderHd.PurchaseOrderNumber } };
                                //var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.ReceiveTypeLkpId);
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.PoPurchaseOrderHdId);
                                @Html.DropDownListFor(z => z.PoPurchaseOrderHdId, selectList, getHtmlAttributes(formTrigger != ERP.Front.Helpers.Enums.Common.FormTriggers.Insert.ToString(), "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.PoPurchaseOrderHdId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(formTrigger != ERP.Front.Helpers.Enums.Common.FormTriggers.Insert.ToString(), "form-control", string.Empty))
                            }
                        </div>
                    </div>
                </div>


                <div class="col-md-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @*@Html.TextBoxFor(z => z.CurrencyRate, new { @class = "form-control", @readonly = "readonly", @tabindex = "-1", @style = "pointer-events: none;" })
        @Html.LabelFor(z => z.CurrencyRate, new { @class = "form-label", @style = "pointer-events: none;" })*@

                            <input type="text" id="finalTotal" class="form-control" readonly tabindex="-1" style="pointer-events:none" disabled/>
                            <label class="form-label" for="finalTotal" style="pointer-events:none">Total</label>
                        </div>
                    </div>
                </div>


                @*<div class="col-md-3 p-r-3 p-l-1">

            <div class="wedgit" style="padding:1px 15px">
                <p>  @Html.Label("Total", new { @class = "form-label" })</p>

                <h5 id="finalTotal" style="color: #73B971"></h5>
            </div>

        </div>*@

            </div>
        }
    </div>
</div>

@functions {
    object getHtmlAttributes(bool Disabled, string CssClass, string CssClass2)
    {
        if (Disabled)
        {
            return new { @class = CssClass, Disabled = Disabled };
        }
        return new { @class = $"{CssClass} {CssClass2}" };
    }
}

