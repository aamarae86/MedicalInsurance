@using ERP.Web.UI.Models.ViewModels.Accounts
@using ERP.Web.UI.Models.ViewModels.General
@model FaAssetDeprnHdVM
@{
    ViewBag.Title = ERP.ResourcePack.AccountsExtend.GlAccMapping.Title;
    string formTrigger = ViewBag.trigger;
    string lang = Request.Cookies["Lang"] == null ? "ar-EG" : Request.Cookies["Lang"].Value.ToString();
    string lkpKeyDdl = lang == "ar-EG" ? nameof(FndLookupValuesVM.NameAr) : nameof(FndLookupValuesVM.NameEn);
    bool isFormDetail = Model != null && formTrigger == ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString();
}
<div class="card">
    <div class="body">
        <div class="header">
            <h2><strong>@ERP.ResourcePack.Accounts.GlJeHeaders.MasterData</strong></h2>
        </div>
        @using (Ajax.BeginForm(nameof(ERP.Web.UI.Controllers.AccountsExtend.FaAssetDeprnHdController.CreateFaAssetDeprnHd), "GlAccMapping", new AjaxOptions { HttpMethod = "POST", OnBegin = "OnBegin", OnSuccess = "OnSuccess", OnComplete = "OnComplete", OnFailure = "OnFailure" }, new { @id = "mainForm" }))
        {
            @Html.HiddenFor(z => z.Id)

            <div class="row clearfix">
                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.AssetDeprnNumber, getHtmlAttributes(true, "form-control", string.Empty))
                            @Html.LabelFor(z => z.AssetDeprnNumber, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @if (lang == "ar-EG")
                            {
                                @Html.TextBoxFor(z => z.StatusAr, getHtmlAttributes(true, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.TextBoxFor(z => z.StatusEn, getHtmlAttributes(true, "form-control", string.Empty))
                            }
                            @Html.LabelFor(z => z.StatusLkpId, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.AssetDeprnName, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            @Html.LabelFor(z => z.AssetDeprnName, new { @class = "form-label label-required" })
                        </div>
                        @Html.ValidationMessageFor(z => z.AssetDeprnName)
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.AssetDeprnDate, getHtmlAttributes(isFormDetail, "form-control datepicker", string.Empty))
                            @Html.LabelFor(z => z.AssetDeprnDate, new { @class = "form-label label-required" })
                        </div>
                        @Html.ValidationMessageFor(z => z.AssetDeprnDate)
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-3">
                    @Html.LabelFor(z => z.AssetId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && !string.IsNullOrEmpty(Model.AssetDescription))
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.AssetId, NameAr = Model.AssetDescription, NameEn = Model.AssetDescription } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.AssetId);

                                @Html.DropDownListFor(z => z.AssetId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.AssetId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                    </div>
                    @Html.ValidationMessageFor(z => z.AssetId)
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(z => z.PeriodId, new { @class = "form-label label-required" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && !string.IsNullOrEmpty(Model.PeriodAr))
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.PeriodId, NameAr = Model.PeriodAr, NameEn = Model.PeriodEn } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.AssetId);

                                @Html.DropDownListFor(z => z.PeriodId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.PeriodId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                    </div>
                    @Html.ValidationMessageFor(z => z.PeriodId)
                </div>
                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.StartDate, new { @class = "form-control", @disabled = true })
                            @Html.LabelFor(z => z.StartDate, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.EndDate, new { @class = "form-control", @disabled = true })
                            @Html.LabelFor(z => z.EndDate, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@functions {
    object getHtmlAttributes(bool Disabled, string CssClass, string CssClass2)
    {
        if (Disabled)
        {
            return new { @class = CssClass, Disabled = Disabled };
        }
        return new { @class = $"{CssClass} {CssClass2}" };
    }
}

