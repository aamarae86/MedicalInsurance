@using ERP.Web.UI.Models.ViewModels.Accounts
@model ApDrCrHdVM
@{
    string formTrigger = ViewBag.trigger;
    string lang = Request.Cookies["Lang"] == null ? "ar-EG" : Request.Cookies["Lang"].Value.ToString();
    string lkpKeyDdl = lang == "ar-EG" ? nameof(ERP.Web.UI.Models.ViewModels.Accounts.CurrenciesVM.DescriptionAr) : nameof(ERP.Web.UI.Models.ViewModels.Accounts.CurrenciesVM.DescriptionEn);
    bool isFormDetail = Model != null && formTrigger == ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString();
}
<div class="card">
    <div class="header">
        <h2><strong>@ERP.ResourcePack.Accounts.GlJeHeaders.MasterData</strong></h2>
    </div>
    <div class="body">
        @using (Ajax.BeginForm(nameof(ERP.Web.UI.Controllers.Accounts.ApDrCrHdController.CreateApDrCrHd), "ApDrCrHd",
            new AjaxOptions { HttpMethod = "POST", OnBegin = "OnBegin", OnSuccess = "OnSuccess", OnComplete = "OnComplete", OnFailure = "OnFailure" }, new { @id = "mainForm" }))
        {
            @Html.HiddenFor(z => z.Id)
            @Html.HiddenFor(z => z.HdDrCrNumber)
            @Html.HiddenFor(z => z.StatusLkpId)
            @Html.HiddenFor(z => z.ListApDrCrTr)
            <div class="row clearfix">
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.HdDrCrNumber, getHtmlAttributes(true, "form-control", string.Empty))
                            @Html.LabelFor(z => z.HdDrCrNumber, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line text-center">
                            @Html.TextBoxFor(z => z.FndLookupValuesStatusLkp.NameAr, getHtmlAttributes(true, "form-control", ""))
                            @Html.LabelFor(z => z.StatusLkpId, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(z => z.VendorId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="form-line">
                            @if (Model != null && Model.Vendors!= null)
                            {
                                var list = new List<CurrenciesVM> { new CurrenciesVM { Id = Model.VendorId.Value, DescriptionAr = Model.Vendors.VendorNameAr, DescriptionEn = Model.Vendors.VendorNameEn} };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.VendorId);

                                @Html.DropDownListFor(z => z.VendorId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.VendorId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.HdDate, getHtmlAttributes(isFormDetail, "form-control", "datepicker"))
                            @Html.LabelFor(z => z.HdDate, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(z => z.CurrencyId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="form-line">
                            @if (Model != null && Model.Currency != null)
                            {
                                var list = new List<CurrenciesVM> { new CurrenciesVM { Id = (long)Model.CurrencyId, DescriptionAr = Model.Currency.DescriptionAr, DescriptionEn = Model.Currency.DescriptionEn } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.CurrencyId);

                                @Html.DropDownListFor(z => z.CurrencyId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.CurrencyId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.CurrencyRate, new { @class = "form-control", @readonly = "readonly", @tabindex = "-1", @style = "pointer-events: none;" })
                            @Html.LabelFor(z => z.CurrencyRate, new { @class = "form-label", @style = "pointer-events: none;" })
                        </div>
                        @Html.ValidationMessageFor(z => z.CurrencyRate)
                    </div>
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(z => z.HdTypeLkpId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="form-line">
                            @if (Model != null && Model.FndLookupValuesHdTypeLkp != null)
                            {
                                var list = new List<CurrenciesVM> { new CurrenciesVM { Id = (long)Model.HdTypeLkpId, DescriptionAr = Model.FndLookupValuesHdTypeLkp.NameAr, DescriptionEn = Model.FndLookupValuesHdTypeLkp.NameEn } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.HdTypeLkpId);

                                @Html.DropDownListFor(z => z.HdTypeLkpId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.HdTypeLkpId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line text-center">
                            @if (lang == "ar-EG")
                            {
                                @Html.TextBoxFor(z => z.FndLookupValuesSourceLkp.NameAr, getHtmlAttributes(true, "form-control", ""))

                            }
                            else if (lang == "en-US")
                            {
                                @Html.TextBoxFor(z => z.FndLookupValuesSourceLkp.NameEn, getHtmlAttributes(true, "form-control", ""))

                            }
                            @Html.LabelFor(z => z.SourceLkpId, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line text-center">
                            @Html.TextBoxFor(z => z.SourceNo, getHtmlAttributes(true, "form-control", ""))
                            @Html.LabelFor(z => z.SourceNo, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextAreaFor(z => z.Comments, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            @Html.LabelFor(z => z.Comments, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</div>

@functions {
    object getHtmlAttributes(bool Disabled, string CssClass, string CssClass2)
    {
        if (Disabled)
        {
            return new { @class = CssClass, Disabled = Disabled };
        }
        return new { @class = $"{CssClass} {CssClass2}" };
    }
}
