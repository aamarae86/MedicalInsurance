@using ERP.Web.UI.Models.ViewModels.CRM.Deals
@using ERP.Web.UI.Models.ViewModels.General
@model CrmDealsVM
@{
    ViewBag.Title = ERP.ResourcePack.CRM.Deals.deals.Title;
    string formTrigger = ViewBag.trigger;
    string lang = Request.Cookies["Lang"] == null ? "ar-EG" : Request.Cookies["Lang"].Value.ToString();
    string lkpKeyDdl = lang == "ar-EG" ? nameof(ERP.Web.UI.Models.ViewModels.General.FndLookupValuesVM.NameAr) : nameof(ERP.Web.UI.Models.ViewModels.General.FndLookupValuesVM.NameEn);
    bool isFormDetail = (Model != null) && formTrigger == ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString();
}

<div class="card">
    <div class="body">

        @using (Ajax.BeginForm(nameof(ERP.Web.UI.Controllers.CRM.CrmDealsController.PostCrmDeals), "CrmDeals", new AjaxOptions { HttpMethod = "POST", OnBegin = "OnBegin", OnSuccess = "OnSuccess", OnComplete = "OnComplete", OnFailure = "OnFailure" }, new { @id = "mainForm" }))
        {
            <div class="border-apply" style="padding:0rem 1rem;margin:1rem">
                <div class="header d-flex justify-content-start align-items-center py-2">
                    <i class="fas fa-2x fa-chevron-down down-arr mr-2" data-toggle="collapse" data-target="#first"></i>
                    <p class="m-0">@ERP.ResourcePack.CRM.Deals.deals.Title </p>
                    <hr />
                </div>
                <div class="collapse show" id="first">


                    @Html.HiddenFor(z => z.Id)
                    @Html.HiddenFor(z => z.AttachmentsListStr)
                    <div class="row clearfix">
                        <div class="col-sm-12">
                            <div class="row  clearfix">

                                <div class="col-sm-3">
                                    <div class="form-group form-float">
                                        <div class="form-line">
                                            @Html.TextBoxFor(z => z.DealDate, getHtmlAttributes(isFormDetail, "form-control", "datepicker"))
                                            @Html.LabelFor(z => z.DealDate, new { @class = "form-label" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-3">
                                    <div class="form-group form-float">
                                        <div class="form-line">
                                            @Html.TextBoxFor(z => z.DealName, getHtmlAttributes(isFormDetail, "form-control", ""))
                                            @Html.LabelFor(z => z.DealName, new { @class = "form-label" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-3">
                                    @Html.LabelFor(z => z.DealTypeLkpId, new { @class = "form-label" })
                                    <div class="form-group form-float">
                                        <div class="">
                                            @if (Model != null && Model.DealTypeLkpId > 0)
                                            {
                                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.DealTypeLkpId, NameAr = Model.DealTypeLkpval, NameEn = Model.DealTypeLkpval } };
                                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.DealTypeLkpId);

                                                @Html.DropDownListFor(z => z.DealTypeLkpId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(z => z.DealTypeLkpId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                                            }

                                        </div>
                                        @Html.ValidationMessageFor(z => z.DealTypeLkpId)
                                    </div>
                                </div>


                                <div class="col-sm-3">
                                    <div class="form-group form-float">
                                        <div class="form-line">
                                            @Html.TextBoxFor(z => z.NextStep, getHtmlAttributes(isFormDetail, "form-control", ""))
                                            @Html.LabelFor(z => z.NextStep, new { @class = "form-label" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-3">
                                    @Html.LabelFor(z => z.LeadSourceLkpId, new { @class = "form-label" })
                                    <div class="form-group form-float">
                                        <div class="">
                                            @if (Model != null && Model.LeadSourceLkpId > 0)
                                            {
                                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.LeadSourceLkpId, NameAr = Model.LeadSourceLkpVal, NameEn = Model.LeadSourceLkpVal } };
                                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.LeadSourceLkpId);

                                                @Html.DropDownListFor(z => z.LeadSourceLkpId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(z => z.LeadSourceLkpId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                                            }

                                        </div>
                                        @Html.ValidationMessageFor(z => z.LeadSourceLkpId)
                                    </div>
                                </div>


                                <div class="col-sm-3">
                                    @Html.LabelFor(z => z.CrmLeadsPersonsId, new { @class = "form-label" })
                                    <div class="form-group form-float">
                                        <div class="">
                                            @if (Model != null && Model.CrmLeadsPersonsId > 0)
                                            {
                                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.CrmLeadsPersonsId, NameAr = Model.CrmLeadsPersonsVal, NameEn = Model.CrmLeadsPersonsVal } };
                                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.CrmLeadsPersonsId);

                                                @Html.DropDownListFor(z => z.CrmLeadsPersonsId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(z => z.CrmLeadsPersonsId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                                            }

                                        </div>
                                        @Html.ValidationMessageFor(z => z.CrmLeadsPersonsId)
                                    </div>
                                </div>



                                <div class="col-sm-3">
                                    <div class="form-group form-float">
                                        <div class="form-line">
                                            @Html.TextBoxFor(z => z.Amount, getHtmlAttributes(isFormDetail, "form-control currency", ""))
                                            @Html.LabelFor(z => z.Amount, new { @class = "form-label" })
                                        </div>
                                    </div>
                                </div>


                                <div class="col-sm-3">
                                    <div class="form-group form-float">
                                        <div class="form-line">
                                            @Html.TextBoxFor(z => z.ClosingDate, getHtmlAttributes(isFormDetail, "form-control datepicker", ""))
                                            @Html.LabelFor(z => z.ClosingDate, new { @class = "form-label" })
                                        </div>
                                    </div>
                                </div>


                                <div class="col-sm-3">
                                    @Html.LabelFor(z => z.StageLkpID, new { @class = "form-label" })
                                    <div class="form-group form-float">
                                        <div class="">
                                            @if (Model != null && Model.StageLkpID > 0)
                                            {
                                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.StageLkpID, NameAr = Model.StageLkpVal, NameEn = Model.StageLkpVal } };
                                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.StageLkpID);

                                                @Html.DropDownListFor(z => z.StageLkpID, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(z => z.StageLkpID, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                                            }

                                        </div>
                                        @Html.ValidationMessageFor(z => z.StageLkpID)
                                    </div>
                                </div>


                                <div class="col-sm-3">
                                    <div class="form-group form-float">
                                        <div class="form-line">
                                            @Html.TextBoxFor(z => z.Probability, getHtmlAttributes(isFormDetail, "form-control", ""))
                                            @Html.LabelFor(z => z.Probability, new { @class = "form-label" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-3">
                                    <div class="form-group form-float">
                                        <div class="form-line">
                                            @Html.TextBoxFor(z => z.Company, getHtmlAttributes(isFormDetail, "form-control", ""))
                                            @Html.LabelFor(z => z.Company, new { @class = "form-label" })
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="col-sm-12">
                                    <div class="form-group form-float">
                                        <div class="form-line">
                                            @Html.TextAreaFor(z => z.Description, getHtmlAttributes(isFormDetail, "form-control", ""))
                                            @Html.LabelFor(z => z.Description, new { @class = "form-label" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                </div>

        }




    </div>

 


</div>

@functions {
    object getHtmlAttributes(bool Disabled, string CssClass, string CssClass2)
    {
        if (Disabled)
        {
            return new { @class = CssClass, Disabled = Disabled };
        }
        return new { @class = $"{CssClass} {CssClass2}" };
    }
}

 