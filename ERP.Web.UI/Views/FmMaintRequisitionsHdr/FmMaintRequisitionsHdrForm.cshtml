@using ERP.Web.UI.Models.ViewModels.PmPropertiesModule
@using ERP.Web.UI.Models.ViewModels.General
@model FmMaintRequisitionsHdrVM
@{
    ViewBag.Title = ERP.ResourcePack.PmPropertiesModule.FmMaintRequisitionsHdr.Title;
    string formTrigger = ViewBag.trigger;
    string lang = Request.Cookies["Lang"] == null ? "ar-EG" : Request.Cookies["Lang"].Value.ToString();
    string lkpKeyDdl = lang == "ar-EG" ? nameof(ERP.Web.UI.Models.ViewModels.General.FndLookupValuesVM.NameAr) : nameof(ERP.Web.UI.Models.ViewModels.General.FndLookupValuesVM.NameEn);
    bool isFormDetail = (Model != null) && formTrigger == ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString();
}

<div class="card">
    <div class="body">
        <div class="header">
            <h2><strong>@ERP.ResourcePack.Accounts.GlJeHeaders.MasterData</strong></h2>
        </div>
        @using (Ajax.BeginForm(nameof(ERP.Web.UI.Controllers.PmPropertiesModule.FmMaintRequisitionsHdrController.PostFmMaintRequisitionsHdr), "FmMaintRequisitionsHdr", new AjaxOptions { HttpMethod = "POST", OnBegin = "OnBegin", OnSuccess = "OnSuccess", OnComplete = "OnComplete", OnFailure = "OnFailure" }, new { @id = "mainForm" }))
        {
            @Html.HiddenFor(z => z.Id)

            <div class="row clearfix">
                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.RequisitionNumber, getHtmlAttributes(true, "form-control", string.Empty))
                            @Html.LabelFor(z => z.RequisitionNumber, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.RequisitionDate, getHtmlAttributes(isFormDetail, "form-control", "datepicker"))
                            @Html.LabelFor(z => z.RequisitionDate, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.RequisitionTime, getHtmlAttributes(isFormDetail, "form-control", "timepicker"))
                            @Html.LabelFor(z => z.RequisitionTime, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @if (Model != null && Model.FndRequisitionStatusLkp != null)
                            {
                                if (lang == "ar-EG")
                                {
                                    @Html.TextBoxFor(z => z.FndRequisitionStatusLkp.NameAr, getHtmlAttributes(1 == 1, "form-control", string.Empty))
                                    @Html.LabelFor(z => z.RequisitionStatusLkpId, new { @class = "form-label" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(z => z.FndRequisitionStatusLkp.NameEn, getHtmlAttributes(1 == 1, "form-control", string.Empty))
                                    @Html.LabelFor(z => z.RequisitionStatusLkpId, new { @class = "form-label" })
                                }
                            }
                            else
                            {
                                @Html.TextBoxFor(z => z.RequisitionStatusLkpId, getHtmlAttributes(true, "form-control", string.Empty))
                                @Html.LabelFor(z => z.RequisitionStatusLkpId, new { @class = "form-label" })
                            }

                        </div>
                    </div>
                </div>
            </div>
           
            <div class="row clearfix">
                <div class="col-sm-3">
                    @Html.LabelFor(z => z.PmPropertiesId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.PmProperties != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.PmPropertiesId, NameAr = Model.PmProperties.PropertyNumber, NameEn = Model.PmProperties.PropertyNumber } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.PmPropertiesId);

                                @Html.DropDownListFor(z => z.PmPropertiesId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.PmPropertiesId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    @Html.LabelFor(z => z.UnitId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.PmPropertiesUnits != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.UnitId, NameAr = Model.PmPropertiesUnits.UnitNo, NameEn = Model.PmPropertiesUnits.UnitNo } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.UnitId);

                                @Html.DropDownListFor(z => z.UnitId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.UnitId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    @Html.LabelFor(z => z.UnitTypeLkpId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.FndUnitTypeLkp != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.UnitTypeLkpId, NameAr = Model.FndUnitTypeLkp.NameAr, NameEn = Model.FndUnitTypeLkp.NameEn } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.UnitTypeLkpId);

                                @Html.DropDownListFor(z => z.UnitTypeLkpId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.UnitTypeLkpId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                    </div>
                </div>
                <div class="col-sm-3">
                    @Html.LabelFor(z => z.ComplaintTypeLkpId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.FndComplaintTypeLkp != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.ComplaintTypeLkpId, NameAr = Model.FndComplaintTypeLkp.NameAr, NameEn = Model.FndComplaintTypeLkp.NameEn } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.ComplaintTypeLkpId);

                                @Html.DropDownListFor(z => z.ComplaintTypeLkpId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.ComplaintTypeLkpId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.ComplaintTypeLkpId)
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-sm-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.CallerName, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            @Html.LabelFor(z => z.CallerName, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.PhoneNumber, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            @Html.LabelFor(z => z.PhoneNumber, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.Mobile, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            @Html.LabelFor(z => z.Mobile, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-sm-12">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextAreaFor(z => z.ComplaintDetails, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            @Html.LabelFor(z => z.ComplaintDetails, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@functions {
    object getHtmlAttributes(bool Disabled, string CssClass, string CssClass2)
    {
        if (Disabled)
        {
            return new { @class = CssClass, Disabled = Disabled };
        }
        return new { @class = $"{CssClass} {CssClass2}" };
    }
}