@using ERP.Web.UI.Models.ViewModels.HR
@using ERP.Web.UI.Models.ViewModels.General
@model PyPayrollOperationsVM
@{
    string formTrigger = ViewBag.trigger;
    string lang = Request.Cookies["Lang"] == null ? "ar-EG" : Request.Cookies["Lang"].Value.ToString();
    string lkpKeyDdl = lang == "ar-EG" ? nameof(FndLookupValuesVM.NameAr) : nameof(FndLookupValuesVM.NameEn);
    bool isFormDetail = Model != null && formTrigger == ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString();
}
<div class="card">
    <div class="header d-flex justify-content-start align-items-center">
        <i class="fas fa-2x fa-chevron-down down-arr mr-2" data-toggle="collapse" data-target="#masterData"></i>
        <h2><strong>@ERP.ResourcePack.HR.PyPayrollOperations.Title</strong></h2>
    </div>
    <div class="body collapse show" id="masterData">
        @using (Ajax.BeginForm(nameof(ERP.Web.UI.Controllers.HR.PyPayrollOperationsController.PostPyPayrollOperations), "PyPayrollOperations",
            new AjaxOptions { HttpMethod = "POST", OnBegin = "OnBegin", OnSuccess = "OnSuccess", OnComplete = "OnComplete", OnFailure = "OnFailure" }, new { @id = "mainForm" }))
        {
            @Html.HiddenFor(z => z.Id)

            <div class="row clearfix">
                <div class="col-md-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.OperationNumber, new { @readOnly = "readonly", @class = "from-control" })
                            @Html.LabelFor(z => z.OperationNumber, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @if (lang == "ar-EG")
                            {
                                @Html.TextBoxFor(z => z.FndStatusLkp.NameAr, getHtmlAttributes(true, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.TextBoxFor(z => z.FndStatusLkp.NameEn, getHtmlAttributes(true, "form-control", string.Empty))
                            }
                            @Html.LabelFor(z => z.StatusLkpId, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.OperationDate, getHtmlAttributes(isFormDetail, "form-control", "datepicker"))
                            @Html.LabelFor(z => z.OperationDate, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-4">
                    @Html.LabelFor(z => z.PeriodId, new { @class = "form-label label-required" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.Periods != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.PeriodId, NameAr = Model.Periods.periodNameAr, NameEn = Model.Periods.periodNameEn } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.PeriodId);

                                @Html.DropDownListFor(z => z.PeriodId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))

                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.PeriodId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.PeriodId)
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.StartDate, new { @class = "form-control", @disabled = true, Value = Model?.Periods?.StartDate?.Split('T')[0] ?? string.Empty })
                            @Html.LabelFor(z => z.StartDate, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.EndDate,new { @class = "form-control", @disabled = true, Value = Model?.Periods?.EndDate?.Split('T')[0] ?? string.Empty })
                            @Html.LabelFor(z => z.EndDate, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-4">
                    @Html.LabelFor(z => z.PyPayrollTypeId, new { @class = "form-label label-required" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.PyPayrollTypes != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.PyPayrollTypeId, NameAr = Model.PyPayrollTypes.PyPayrollTypeName, NameEn = Model.PyPayrollTypes.PyPayrollTypeName } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.PyPayrollTypeId);

                                @Html.DropDownListFor(z => z.PyPayrollTypeId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.PyPayrollTypeId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.PyPayrollTypeId)
                    </div>
                </div>
                <div class="col-md-4">
                    @Html.LabelFor(z => z.HrPersonId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.HrPersons != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.HrPersonId, NameAr = Model.HrPersons.FullName, NameEn = Model.HrPersons.FullName } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.HrPersonId);

                                @Html.DropDownListFor(z => z.HrPersonId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.HrPersonId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    @Html.LabelFor(z => z.JobLkpId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.FndJobLkp != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.JobLkpId, NameAr = Model.FndJobLkp.NameAr, NameEn = Model.FndJobLkp.NameEn } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.JobLkpId);

                                @Html.DropDownListFor(z => z.JobLkpId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.JobLkpId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-12">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextAreaFor(z => z.Notes, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            @Html.LabelFor(z => z.Notes, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@functions {
    object getHtmlAttributes(bool Disabled, string CssClass, string CssClass2)
    {
        if (Disabled) { return new { @class = CssClass, Disabled = Disabled }; }
        return new { @class = $"{CssClass} {CssClass2}" };
    }
}