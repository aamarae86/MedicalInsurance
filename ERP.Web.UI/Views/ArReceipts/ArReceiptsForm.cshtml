@using ERP.Web.UI.Models.ViewModels.Accounts
@model ArReceiptsVM
@{
    string formTrigger = ViewBag.trigger;
    string lang = Request.Cookies["Lang"] == null ? "ar-EG" : Request.Cookies["Lang"].Value.ToString();
    string bankAccKeyDdl = lang == "ar-EG" ? nameof(ApBankAccountsVM.BankAccountNameAr) : nameof(ApBankAccountsVM.BankAccountNameEn);
    string currencyKeyDdl = lang == "ar-EG" ? nameof(CurrenciesVM.DescriptionAr) : nameof(CurrenciesVM.DescriptionEn);
    string ReceiptStatus = lang == "ar-EG" ? (Model == null ? "جديد" : Model.FndStatusLkp.NameAr) : (Model == null ? "New" : Model.FndStatusLkp.NameEn);
    string customerKeyDdl = lang == "ar-EG" ? nameof(ArCustomersVM.CustomerNameAr) : nameof(ArCustomersVM.CustomerNameEn);
    bool isFormDetail = Model != null && formTrigger == ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString();
}
<div class="card">
    <div class="header d-flex justify-content-start align-items-center">
        <i class="fas fa-2x fa-chevron-down down-arr mr-2" data-toggle="collapse" data-target="#masterData"></i>
        <h2><strong>@ERP.ResourcePack.Accounts.ArReceipts.Title</strong></h2>
    </div>
    <div class="body collapse show" id="masterData">
        @using (Ajax.BeginForm(nameof(ERP.Web.UI.Controllers.Accounts.ArReceiptsController.CreateArReceipts), "ArReceipts",
            new AjaxOptions { HttpMethod = "POST", OnBegin = "OnBegin", OnSuccess = "OnSuccess", OnComplete = "OnComplete", OnFailure = "OnFailure" }, new { @id = "mainForm" }))
        {
            @Html.HiddenFor(z => z.Id)
            @Html.HiddenFor(z => z.ListReceiptsOnAccountStr)
            @Html.HiddenFor(z => z.ListReceiptDetailsStr)
            @Html.HiddenFor(z => z.StatusLkpId, new { @Value = 278 })
            <div class="row clearfix">
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.ReceiptNumber, getHtmlAttributes(true, "form-control", ""))
                            @Html.LabelFor(z => z.ReceiptNumber, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.ReceiptDate, getHtmlAttributes(isFormDetail, "form-control", "datepicker"))
                            @Html.LabelFor(z => z.ReceiptDate, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBox("StatusLkpText", ReceiptStatus, getHtmlAttributes(true, "form-control", string.Empty))
                            @Html.LabelFor(z => z.StatusLkpId, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.Amount, "", getHtmlAttributes(true, "form-control currency", string.Empty))
                            @Html.LabelFor(z => z.Amount, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.CustomerNumber, getHtmlAttributes(true, "form-control", ""))
                            @Html.LabelFor(z => z.CustomerNumber, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(z => z.ArCustomerId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.ArCustomer != null)
                            {
                                var list = new List<ArCustomersVM> { new ArCustomersVM { Id = (long)Model.ArCustomerId, CustomerNameAr = Model.ArCustomer.CustomerNameAr, CustomerNameEn = Model.ArCustomer.CustomerNameEn } };
                                var selectList = new SelectList(list, "Id", customerKeyDdl, Model.ArCustomerId);

                                @Html.DropDownListFor(z => z.ArCustomerId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.ArCustomerId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.ArCustomerId)

                    </div>
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(z => z.CurrencyId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.Currency != null)
                            {
                                var list = new List<CurrenciesVM> { new CurrenciesVM { Id = (long)Model.CurrencyId, DescriptionAr = Model.Currency.DescriptionAr, DescriptionEn = Model.Currency.DescriptionEn } };
                                var selectList = new SelectList(list, "Id", currencyKeyDdl, Model.CurrencyId);

                                @Html.DropDownListFor(z => z.CurrencyId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.CurrencyId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.CurrencyId)

                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-6">
                    @Html.LabelFor(z => z.BankAccountId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.BankAccount != null)
                            {
                                var list = new List<ApBankAccountsVM> { new ApBankAccountsVM { Id = (long)Model.BankAccountId, BankAccountNameAr = Model.BankAccount.BankAccountNameAr, BankAccountNameEn = Model.BankAccount.BankAccountNameEn } };
                                var selectList = new SelectList(list, "Id", bankAccKeyDdl, Model.BankAccountId);

                                @Html.DropDownListFor(z => z.BankAccountId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.BankAccountId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.BankAccountId)

                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.ManualReceiptNo, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            @Html.LabelFor(z => z.ManualReceiptNo, new { @class = "form-label" })
                        </div>
                        @Html.ValidationMessageFor(z => z.ManualReceiptNo)
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.CurrencyRate, new { @class = "form-control", @readonly = "readonly" })
                            @Html.LabelFor(z => z.CurrencyRate, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-12">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextAreaFor(z => z.Notes, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            @Html.LabelFor(z => z.Notes, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</div>

@functions {
    object getHtmlAttributes(bool Disabled, string CssClass, string CssClass2)
    {
        if (Disabled)
        {
            return new { @class = CssClass, Disabled = Disabled };
        }
        return new { @class = $"{CssClass} {CssClass2}" };
    }
}

