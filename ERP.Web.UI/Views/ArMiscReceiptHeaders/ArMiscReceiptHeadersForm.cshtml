@using ERP.Web.UI.Models.ViewModels.General
@using ERP.Web.UI.Models.ViewModels.Accounts
@model ArMiscReceiptHeadersVM
@{
    string formTrigger = ViewBag.trigger;
    string lang = Request.Cookies["Lang"] == null ? "ar-EG" : Request.Cookies["Lang"].Value.ToString();
    string lkpKeyDdl = lang == "ar-EG" ? nameof(FndLookupValuesVM.NameAr) : nameof(FndLookupValuesVM.NameEn);
    string bankAccKeyDdl = lang == "ar-EG" ? nameof(ApBankAccountsVM.BankAccountNameAr) : nameof(ApBankAccountsVM.BankAccountNameEn);
    string collectorKeyDdl = lang == "ar-EG" ? nameof(CollectorVM.CollectorNameAr) : nameof(CollectorVM.CollectorNameEn);
    bool isFormDetail = Model != null && formTrigger == ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString();
    string colNo = isFormDetail ? "col-md-3" : "col-md-2";
}
<div class="card">
    <div class="header d-flex justify-content-start align-items-center">
        <i class="fas fa-2x fa-chevron-down down-arr mr-2" data-toggle="collapse" data-target="#masterData"></i>
        <h2><strong>@ERP.ResourcePack.Accounts.ArMiscReceiptHeaders.Title</strong></h2>
    </div>
    <div class="body collapse show" id="masterData">
        @using (Ajax.BeginForm(nameof(ERP.Web.UI.Controllers.Accounts.ArMiscReceiptHeadersController.CreateArMiscReceiptHeaders), "ArMiscReceiptHeaders",
    new AjaxOptions { HttpMethod = "POST", OnBegin = "OnBegin", OnSuccess = "OnSuccess", OnComplete = "OnComplete", OnFailure = "OnFailure" }, new { @id = "mainForm" }))
        {
            @Html.HiddenFor(z => z.Id)
            @Html.HiddenFor(z => z.Lang, new { Value = lang })
            @Html.HiddenFor(z => z.ListArMiscReceiptDetails)
            @Html.HiddenFor(z => z.ListArMiscReceiptLines)
            @Html.HiddenFor(z => z.PostedLkpId)
            <div class="row clearfix">
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.ReceiptNumber, new { @readOnly = "readonly", @class = "from-control" })
                            @Html.LabelFor(z => z.ReceiptNumber, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">

                            @Html.TextBoxFor(z => z.MiscReceiptDate, getHtmlAttributes(isFormDetail, "form-control", "datepicker"))
                            @Html.LabelFor(z => z.MiscReceiptDate, new { @class = "form-label" })

                        </div>
                    </div>
                </div>
                <div class="@colNo">
                    @Html.LabelFor(z => z.BeneficentId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.SpBeneficent != null)
                            {
                                var list = new List<ERP.Web.UI.Models.ViewModels.SpGuarantees.SpBeneficentVM> { new ERP.Web.UI.Models.ViewModels.SpGuarantees.SpBeneficentVM { Id = (long)Model.BeneficentId, BeneficentName = Model.SpBeneficent.BeneficentName } };
                                var selectList = new SelectList(list, "Id", nameof(ERP.Web.UI.Models.ViewModels.SpGuarantees.SpBeneficentVM.BeneficentName), Model.BeneficentId);

                                @Html.DropDownListFor(z => z.BeneficentId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.BeneficentId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.BeneficentId)

                    </div>
                </div>
                @if (!isFormDetail)
                {
                    <div class="col-md-1">
                        <div style="margin-top:15px">
                            <a href="javascript:;" class="text-info" onclick="return GetBeneficentModal()" title="@ERP.ResourcePack.Accounts.ArMiscReceiptHeaders.AddSpBeneficent"><i class="fa fa-2x fa-plus-circle"></i></a>
                        </div>
                    </div>
                }
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.Amount, getHtmlAttributes(isFormDetail, "form-control currency ", string.Empty))
                            @Html.LabelFor(z => z.Amount, new { @class = "form-label" })
                        </div>
                        @Html.ValidationMessageFor(z => z.Amount)
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-3">
                    @Html.LabelFor(z => z.CollectorId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.FndCollectors != null)
                            {
                                var list = new List<CollectorVM> { new CollectorVM { Id = (long)Model.CollectorId, CollectorNameAr = Model.FndCollectors.CollectorNameAr, CollectorNameEn = Model.FndCollectors.CollectorNameEn } };
                                var selectList = new SelectList(list, "Id", collectorKeyDdl, Model.CollectorId);

                                @Html.DropDownListFor(z => z.CollectorId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.CollectorId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.CollectorId)

                    </div>
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(z => z.ReceiptTypeLkpId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.FndReceiptTypeLkp != null)
                            {
                                var list = new List<FndLookupValuesVM> { new FndLookupValuesVM { Id = (long)Model.ReceiptTypeLkpId, NameAr = Model.FndReceiptTypeLkp.NameAr, NameEn = Model.FndReceiptTypeLkp.NameEn } };
                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.TransactionTypeLkpId);

                                @Html.DropDownListFor(z => z.ReceiptTypeLkpId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.ReceiptTypeLkpId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.ReceiptTypeLkpId)
                    </div>
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(z => z.BankAccountId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="">
                            @if (Model != null && Model.ApBankAccounts != null)
                            {
                                var list = new List<ApBankAccountsVM> { new ApBankAccountsVM { Id = (long)Model.BankAccountId, BankAccountNameAr = Model.ApBankAccounts.BankAccountNameAr, BankAccountNameEn = Model.ApBankAccounts.BankAccountNameEn } };
                                var selectList = new SelectList(list, "Id", bankAccKeyDdl, Model.BankAccountId);

                                @Html.DropDownListFor(z => z.BankAccountId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.BankAccountId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.BankAccountId)

                    </div>
                </div>
                <div class="col-md-3 d-none">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.ManualReceiptNumber, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            @Html.LabelFor(z => z.ManualReceiptNumber, new { @class = "form-label" })
                        </div>
                        @Html.ValidationMessageFor(z => z.ManualReceiptNumber)
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-12">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextAreaFor(z => z.Notes, new { @class = "form-control" })
                            @Html.LabelFor(z => z.Notes, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@functions {
    object getHtmlAttributes(bool Disabled, string CssClass, string CssClass2)
    {
        if (Disabled)
        {
            return new { @class = CssClass, Disabled = Disabled };
        }
        return new { @class = $"{CssClass} {CssClass2}" };
    }
}