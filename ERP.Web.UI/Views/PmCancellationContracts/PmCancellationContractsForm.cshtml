@using ERP.Web.UI.Models.ViewModels.PmPropertiesModule
@model PmCancellationContractsVM
@{
    string formTrigger = ViewBag.trigger;
    string lang = Request.Cookies["Lang"] == null ? "ar-EG" : Request.Cookies["Lang"].Value.ToString();
    string lkpKeyDdl = lang == "ar-EG" ? nameof(ERP.Web.UI.Models.ViewModels.General.FndLookupValuesVM.NameAr) : nameof(ERP.Web.UI.Models.ViewModels.General.FndLookupValuesVM.NameEn);
    var lastDateTime = ViewData["Version"] == null ? null : ViewData["Version"] as Nullable<DateTime>;
}
<div class="card">
    <div class="body">
        @using (Ajax.BeginForm(nameof(ERP.Web.UI.Controllers.PmPropertiesModule.PmCancellationContractsController.PostPmCancellationContracts), "PmCancellationContracts",
            new AjaxOptions { HttpMethod = "POST", OnBegin = "OnBegin", OnSuccess = "OnSuccess", OnComplete = "OnComplete", OnFailure = "OnFailure" }, new { @id = "mainForm" }))
        {
            @Html.HiddenFor(z => z.Id)
            @Html.HiddenFor(z => z.codeComUtilityIds)
            @Html.HiddenFor(z => z.codeComUtilityTexts)
            <input type="hidden" id="LastModificationTime" name="LastModificationTime" value="@lastDateTime" />
            <div class="row clearfix">
                <div class="col-sm-6">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.CancellationNumber, new { @class = "form-control", @disabled = true })
                            @Html.LabelFor(z => z.CancellationNumber, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.FndLookupValues.NameAr, new { @class = "form-control", @disabled = true })
                            @Html.LabelFor(z => z.StatusLkpId, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-6">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.CancellationDate, new { @class = "form-control datepicker" })
                            @Html.LabelFor(z => z.CancellationDate, new { @class = "form-label" })
                        </div>
                        @Html.ValidationMessageFor(z => z.CancellationDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    @Html.LabelFor(z => z.PmContractId, new { @class = "form-label" })
                    <div class="form-group form-float">
                        <div class="form-group">
                            @if (Model != null && Model.PmContract != null)
                            {
                                var list = new List<ERP.Web.UI.Models.ViewModels.General.FndLookupValuesVM> { new ERP.Web.UI.Models.ViewModels.General.FndLookupValuesVM { Id = Model.PmContractId.Value, NameAr = Model.PmContract.ContractNumber, NameEn = Model.PmContract.ContractNumber } };

                                var selectList = new SelectList(list, "Id", lkpKeyDdl, Model.PmContractId);

                                @Html.DropDownListFor(z => z.PmContractId, selectList, new { @class = "form-control" })
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.PmContractId, Enumerable.Empty<SelectListItem>(), new { @class = "form-control" })
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.PmContractId)
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-sm-6">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.PmTenantNameShow, new { @class = "form-control", @disabled = true })
                            @Html.LabelFor(z => z.PmTenantNameShow, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.StartDate, new { @class = "form-control", @disabled = true })
                            @Html.LabelFor(z => z.StartDate, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-sm-6">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.EndDate, new { @class = "form-control", @disabled = true })
                            @Html.LabelFor(z => z.EndDate, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.ContractAmount, new { @class = "form-control currency", @disabled = true })
                            @Html.LabelFor(z => z.ContractAmount, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-sm-6">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.FinePeriodPerDays, new { @class = "form-control" })
                            @Html.LabelFor(z => z.FinePeriodPerDays, new { @class = "form-label" })
                        </div>
                        @Html.ValidationMessageFor(z => z.FinePeriodPerDays)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.FinePeriodPerDaysAmount, new { @class = "form-control datepicker", @disabled = true })
                            @Html.LabelFor(z => z.FinePeriodPerDaysAmount, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-sm-6">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.FineAmount, new { @class = "form-control currency" })
                            @Html.LabelFor(z => z.FineAmount, new { @class = "form-label" })
                        </div>
                        @Html.ValidationMessageFor(z => z.FineAmount)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.ReturnedAmount, new { @class = "form-control currency", @disabled = true })
                            @Html.LabelFor(z => z.ReturnedAmount, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                @Html.Action(nameof(ERP.Web.UI.Controllers.Accounts.GlAccDetailsController.DrawGlAccController), "GlAccDetails",
               new { glAccHeadersVMs = ViewData["ListGlAccHeadersVM"] == null ? new List<ERP.Web.UI.Models.ViewModels.Accounts.GlAccHeadersVM>() : ViewData["ListGlAccHeadersVM"] as List<ERP.Web.UI.Models.ViewModels.Accounts.GlAccHeadersVM> })

            </div>
        }

        <div class="row clearfix">
            <div class="form-group text-center form-float">
                <button type="submit" id="btnSubmition" class="btn btn-info btn-lg m-l-15 waves-effect">@(Model == null ? ERP.ResourcePack.Common.Settings.BtnSave : ERP.ResourcePack.Common.Settings.BtnUpdate)</button>
                <div id="submitLoader" style="display:none">
                    <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
                </div>
            </div>
        </div>

    </div>
</div>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/AssetsPack/assets/js/pages/forms/basic-form-elements.js"></script>
@Html.Partial("~/ViewsScripts/GlAccDetails/GlAccDetailsScripts.cshtml", ViewData["repeatTrigger"] = "")
@Html.Partial("~/ViewsScripts/GlAccDetails/GlAccDetailsScriptManager.cshtml")
@if (Model != null && !string.IsNullOrEmpty(Model.codeComUtilityIds) && !string.IsNullOrEmpty(Model.codeComUtilityTexts))
{
    <script>
        BindCodeComUtilitesDropDowns(__arrGlSelect2,'AccId','@Model.codeComUtilityIds','@Model.codeComUtilityTexts');
    </script>
}

<script>

    $(".currency").inputmask(
        {
            alias: "currency",
            prefix: '',
            removeMaskOnSubmit: true,
            autoUnmask: true,
            oncleared: function (e) {
                $numeric.val('');
            }
        }

    );

    $(function () {

        DDLChange($('#PmContractId'));

        if ($('#Id').val()) {
            setTimeout(function(){ FinePeriodPerDaysChange(); }, 500)
        }
    });

    $('#main-modal .modal-footer button[data-dismiss="modal"]').on('click', function (e) {

        e.preventDefault();

        if (window.location.href.includes('PmCancellationContracts'))  window.location.reload();

    });

      $('#main-modal .modal-header button[data-dismiss="modal"]').on('click', function (e) {

        e.preventDefault();

        if (window.location.href.includes('PmCancellationContracts'))  window.location.reload();

      });

    $('#btnSubmition').on('click', function () {

        const resultCodeComUtility = GetCodeComUtilites(__arrGlSelect2, 'AccId');

        if (resultCodeComUtility == null) {
            toastr.warning('@ERP.ResourcePack.Accounts.ArCustomers.EnterAllData');
            return;
        }

        $('#codeComUtilityIds').val(resultCodeComUtility.idsStr);
        $('#codeComUtilityTexts').val(resultCodeComUtility.textsStr);

        $('#mainForm').submit();

        if ($('#mainForm').valid()) {

            $(this).hide();
            $('#submitLoader').show();

        } else {

            $(this).show();
            $('#submitLoader').hide();

        }

    });

    $('#PmContractId').select2(ReturnSelect2ObjectDefault(`${baseUrl}/PmContract/GetPmContractSelect2`));

    $('#PmContractId').on('change', function (e) {

        const currency = $(this);
        DDLChange(currency);

    });

    function DDLChange(currency) {

        const PmTenantNameTxt = $('#PmTenantNameShow');
        const StartDateTxt = $('#StartDate');
        const EndDateTxt = $('#EndDate');
        const ContractAmountTxt = $('#ContractAmount');

        if (currency === undefined || currency.find(':selected').val() === undefined) {

            $('#PmTenantNameShow').val('');
            $('#StartDate').val('');
            $('#EndDate').val('');
            $('#ContractAmount').val('');
        } else {
            $.ajax({
                url: `${baseUrl}/PmContract/GetPmContractForAjaxCall`,
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${$_token}`
                },
                data: {
                    Id: currency.find(':selected').val()
                }
            }).done(function (result) {

                let _inputSelector1 = $('#PmTenantNameShow');
                let _inputSelector2 = $('#StartDate');
                let _inputSelector3 = $('#EndDate');
                let _inputSelector4 = $('#ContractAmount');

                _inputSelector1.parent('.form-line').addClass('focused');
                _inputSelector2.parent('.form-line').addClass('focused');
                _inputSelector3.parent('.form-line').addClass('focused');
                _inputSelector4.parent('.form-line').addClass('focused');

                let tenantName = (lang === 'en-US' ? result.result.pmTenants.tenantNameEn : result.result.pmTenants.tenantNameAr);
                PmTenantNameTxt.val(tenantName);
                StartDateTxt.val(result.result.contractStartDate);
                EndDateTxt.val(result.result.contractEndDate);
                ContractAmountTxt.val(result.result.rentAmount);

            }).fail(function (response) {
                toastr.error(response);
            });
        }
    }

    jQuery('#FinePeriodPerDays').on('input propertychange paste', function () {
        if ($('#FineAmount').val() && $('#CancellationDate').val()) {
            FinePeriodPerDaysChange();
        } else {
            $('#FinePeriodPerDays').val('');
            toastr.warning('@ERP.ResourcePack.Accounts.ArCustomers.EnterDateAndAmount')
        }
    });

    function FinePeriodPerDaysChange() {

        var ContractAmount = $('#ContractAmount').val();

        var diff = (Date.parse($('#EndDate').val())) - (Date.parse($('#StartDate').val()));

        diff = (diff / (1000 * 3600 * 24)) + 1;

        var FinePeriodPerDays = $('#FinePeriodPerDays').val();

        var CancellationDate = $('#CancellationDate').val();

        var FineAmount = $('#FineAmount').val();

        var finalToMultiply = (parseInt(ContractAmount) / (diff)) * parseInt(FinePeriodPerDays);

        $('#FinePeriodPerDaysAmount').val(finalToMultiply);
        $('#FinePeriodPerDaysAmount').parent('.form-line').addClass('focused');
        //-------------------------------------------------------------------------------------
        var ReturnedAmount = parseInt(ContractAmount) - (parseInt(ContractAmount) / diff) * ((Date.parse(CancellationDate) - Date.parse($('#StartDate').val()) + 1)) + parseInt(FinePeriodPerDays) + parseInt(FineAmount);

        $('#ReturnedAmount').val(ReturnedAmount);
        $('#ReturnedAmount').parent('.form-line').addClass('focused');

    };

</script>
