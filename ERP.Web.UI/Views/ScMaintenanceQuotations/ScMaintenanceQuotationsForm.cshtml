@using ERP.Web.UI.Models.ViewModels.AidModule
@model ScMaintenanceQuotationsVM
@{
    string formTrigger = ViewBag.trigger;
    string lang = Request.Cookies["Lang"] == null ? "ar-EG" : Request.Cookies["Lang"].Value.ToString();
    bool isFormDetail = Model != null && formTrigger == ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString();
    bool isFormEdit = Model != null && formTrigger == ERP.Front.Helpers.Enums.Common.FormTriggers.Update.ToString();
    var lastDateTime = ViewData["Version"] == null ? null : ViewData["Version"] as Nullable<DateTime>;
}
<div class="card">
    <div class="header">
        <h2><strong>@ERP.ResourcePack.Accounts.GlJeHeaders.MasterData</strong></h2>
    </div>
    <div class="body">
        @using (Ajax.BeginForm(nameof(ERP.Web.UI.Controllers.AidModule.ScMaintenanceQuotationsController.CreateScMaintenanceQuotations), "ScMaintenanceQuotations",
            new AjaxOptions { HttpMethod = "POST", OnBegin = "OnBegin", OnSuccess = "OnSuccess", OnComplete = "OnComplete", OnFailure = "OnFailure" }, new { @id = "mainForm" }))
        {
            @Html.HiddenFor(z => z.Id)
            @Html.HiddenFor(z => z.AttachmentsListStr)
            @Html.HiddenFor(z => z.MaintenanceQuotationDetailsListStr)

            <input type="hidden" id="LastModificationTime" name="LastModificationTime" value="@lastDateTime" />

            <div class="row clearfix">
                <div class="col-md-4">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.QuotationNumber, new { @class = "form-control", @readonly = "readonly", @tabindex = "-1", @style = "pointer-events: none;" })
                            @Html.LabelFor(z => z.QuotationNumber, new { @class = "form-label", @style = "pointer-events: none;" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group form-float">
                        <div class="form-line text-center">
                            @Html.TextBoxFor(z => z.QuotationDate, getHtmlAttributes(isFormDetail, "form-control", "datepicker"))
                            @Html.LabelFor(z => z.QuotationDate, new { @class = "form-label label-required" })
                        </div>
                        @Html.ValidationMessageFor(z => z.QuotationDate)
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group form-float">
                        <div class="form-line text-center">
                            @if (Model == null || Model.FndStatusLkp == null)
                            {
                                @Html.TextBoxFor(z => z.StatusLkpId, getHtmlAttributes(true, "form-control", string.Empty))
                            }
                            else if (lang == "ar-EG")
                            {
                                @Html.TextBoxFor(z => z.FndStatusLkp.NameAr, getHtmlAttributes(true, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.TextBoxFor(z => z.FndStatusLkp.NameEn, getHtmlAttributes(true, "form-control", string.Empty))
                            }
                            @Html.LabelFor(z => z.StatusLkpId, new { @class = "form-label" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-3">
                    @Html.LabelFor(z => z.ScMaintenanceTechnicalReportId, new { @class = "form-label label-required" })
                    <div class="form-group form-float">
                        <div class="form-line">
                            @if (Model != null && Model.ScMaintenanceTechnicalReport != null)
                            {
                                var list = new List<ScPortalRequestsVM> { new ScPortalRequestsVM { Id = (long)Model.ScMaintenanceTechnicalReportId, Name = Model.ScMaintenanceTechnicalReport.TechnicalReportNumber } };
                                var selectList = new SelectList(list, "Id", nameof(ScPortalRequestsVM.Name), Model.ScMaintenanceTechnicalReportId);

                                @Html.DropDownListFor(z => z.ScMaintenanceTechnicalReportId, selectList, getHtmlAttributes(isFormDetail || isFormEdit, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.ScMaintenanceTechnicalReportId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail || isFormEdit, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.ScMaintenanceTechnicalReportId)
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.PortalRequestNumber, new { @class = "form-control", @readonly = "readonly", @tabindex = "-1", @style = "pointer-events: none;" })
                            @Html.LabelFor(z => z.PortalRequestNumber, new { @class = "form-label", @style = "pointer-events: none;" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.TextBoxFor(z => z.PortalUserName, new { @class = "form-control", @readonly = "readonly", @tabindex = "-1", @style = "pointer-events: none;" })
                            @Html.LabelFor(z => z.PortalUserName, new { @class = "form-label", @style = "pointer-events: none;" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(z => z.VendorId, new { @class = "form-label label-required" })
                    <div class="form-group form-float">
                        <div class="form-line">
                            @if (Model != null && Model.ApVendors != null)
                            {
                                var list = new List<ScPortalRequestsVM> { new ScPortalRequestsVM { Id = (long)Model.VendorId, Name = lang == "ar-EG" ? Model.ApVendors.VendorNameAr : Model.ApVendors.VendorNameEn } };
                                var selectList = new SelectList(list, "Id", nameof(ScPortalRequestsVM.Name), Model.VendorId);

                                @Html.DropDownListFor(z => z.VendorId, selectList, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                            else
                            {
                                @Html.DropDownListFor(z => z.VendorId, Enumerable.Empty<SelectListItem>(), getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                            }
                        </div>
                        @Html.ValidationMessageFor(z => z.VendorId)
                    </div>
                </div>
            </div>
            <div class="row clearfix">
                <div class="col-md-12">
                    <div class="form-group form-float">
                        <div class="form-line">
                            @Html.LabelFor(z => z.Notes, new { @class = "form-label" })
                            @Html.TextAreaFor(z => z.Notes, getHtmlAttributes(isFormDetail, "form-control", string.Empty))
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</div>

@functions {
    object getHtmlAttributes(bool Disabled, string CssClass, string CssClass2)
    {
        if (Disabled) { return new { @class = CssClass, Disabled = Disabled }; }
        return new { @class = $"{CssClass} {CssClass2}" };
    }
}
