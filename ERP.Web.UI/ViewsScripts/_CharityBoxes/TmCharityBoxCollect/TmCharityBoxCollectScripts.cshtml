@using ERP.ResourcePack.CharityBoxes
@using ERP.Web.UI.Controllers.CharityBoxes
@using ERP.Authorization;
@{
    string permissionsStr = TempData["Permissions"].ToString();
    string encUpdateTrigger = ERP.Front.Helpers.Enums.Common.EncUpdate;
    string encInsertTrigger = ERP.Front.Helpers.Enums.Common.EncInsert;
    string encShowTrigger = ERP.Front.Helpers.Enums.Common.EncShow;
}

@if (permissionsStr.Contains(PermissionNames.Pages_TmCharityBoxCollect_Post))
{
    <script>
        const PostAjax = function (id) {

            bootbox.confirm({
                message: _booBoxMessagePosting,
                buttons: bootBoxDefaultBtns,
                callback: function (result) {

                    if (result) {

                        const data = {
                            id: id,
                            lang: lang,
                            userId: 0
                        };

                        $.ajax({
                            url: `${baseUrl}/TmCharityBoxCollect/PostTmCharityBoxCollect`,
                            type: 'POST',
                            data: JSON.stringify(data),
                            headers:
                            {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${$_token}`
                            },
                        }).done(function (response) {

                            if (response.result.finalStatues == 'F') {
                                toastr.warning(response.result.reason);
                            }
                            else {
                                toastr.success(response.result.reason);

                                if (formView) {

                                    setTimeout(function () {
                                        window.location.href = $PrefixHostName + '/TmCharityBoxCollect';
                                    }, 100);

                                } else {
                                    LoadDataGrid();
                                }
                            }

                        }).fail(function (response) {
                            toastr.error(response.responseText);
                        });

                    }

                }
            });


        };
    </script>
}
else
{
    <script>
        const PostAjax = function (id) { };
    </script>
}


<script>
    const _mainController = "TmCharityBoxCollect"
    const newBox = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.TmCharityBoxActionDetailsAction.New);
    const replaceBox = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.TmCharityBoxActionDetailsAction.Replace);
    const missedBox = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.TmCharityBoxActionDetailsAction.Missed);
    const brokenBox = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.TmCharityBoxActionDetailsAction.Broken);
    const gainBox = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.TmCharityBoxActionDetailsAction.Gain);
    const activeBoxId = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.TmCharityBoxesStatus.Active);
    const notActiveBoxId = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.TmCharityBoxesStatus.NotActive);
    const _newStatus = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.TmCharityBoxCollectStatus.New);
    const _postedStatus = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.TmCharityBoxCollectStatus.Posted);

    $(function () {

        LoadDataGrid();

        $('#TmCharityBoxCollect').addClass('active');

        $('#CharityBoxName').parent('.form-line').addClass('focused');
        $('#SubLocation').parent('.form-line').addClass('focused');
        $('#MemberNumber').parent('.form-line').addClass('focused');
        $('#MemberCategory').parent('.form-line').addClass('focused');
        $('#Total').parent('.form-line').addClass('focused');

    });

    const _loadDataUrl = `${$PrefixHostName}/${_mainController}/@nameof(TmCharityBoxCollectController.LoadDataGrid)`;
    const _tblSelector = $('#tblTmCharityBoxCollect');
    const _tblLoader = $('#tblLoader');

    const _permissions = '@permissionsStr';
    const _updatePermission = '@PermissionNames.Pages_TmCharityBoxCollect_Update';
    const _deletePermission = '@PermissionNames.Pages_TmCharityBoxCollect_Delete';
    const _postPermission = '@PermissionNames.Pages_TmCharityBoxCollect_Post';

    var OnBegin = function (response) {
        fireBtnLoader();
    };

    var OnSuccess = function (response) {

        $('#btnSubmition').prop('disabled', false);

        if (response.success) {

            if (response.customRestResult.trigger === '@ERP.Front.Helpers.Enums.Common.FormTriggers.Insert') {

                toastr.success(response.customRestResult.message);

                setTimeout(function () {
                    window.location.href = $PrefixHostName + '/TmCharityBoxCollect';
                }, 200);

            }
            else if (response.customRestResult.trigger === '@ERP.Front.Helpers.Enums.Common.FormTriggers.Update') {

                toastr.success(response.customRestResult.message);

                setTimeout(function () {
                    window.location.href = $PrefixHostName + '/TmCharityBoxCollect';
                }, 200);

            }
            else {
                toastr.error(response.customRestResult.message);
            }

        } else {
            toastr.error(response.error.message);
        }

    };

    var OnComplete = function (response) {
        downBtnLoader();
    };

    var OnFailure = function (response) {
        toastr.error(response);
        downBtnLoader();
    };

    const LoadDataGrid = function () {

        $('#tblLoader').show();

        const params = {
            BankAccountId: $('#searchBox #BankAccountId').find(':selected').val(),
            StatusLkpId: $('#searchBox #StatusLkpId').find(':selected').val(),
            CollectNumber:$('#searchBox #CollectNumber').val(),
            FromDate:$('#searchBox #FromDate').val(),
            ToDate:$('#searchBox #ToDate').val()
        };

        const columns = [
            {
                "data": "result.data.id",
                'render': function (data, type, row, meta) {
                    return meta.row + meta.settings._iDisplayStart + 1;
                }
            },
            {
                "data": "CollectNumber",
                "name": "CollectNumber",
                "autoWidth": true
            },
            {
                "data": "CollectDate",
                "name": "CollectDate",
                "autoWidth": true
            },
            {
                "data": null,
                "autoWidth": true,
                "render": function (d, t, row) {

                    if (row.FndStatusLookup == null) return '';

                    return lang === 'ar-EG' ? row.FndStatusLookup.NameAr : row.FndStatusLookup.NameEn;
                }
            },
            {
                "data": null,
                "autoWidth": true,
                "render": function (d, t, row) {

                    if (row.ApBankAccounts == null) return '';

                    return lang === 'ar-EG' ? row.ApBankAccounts.BankAccountNameAr : row.ApBankAccounts.BankAccountNameEn;
                }
            },
            {
                "data": "Notes",
                "name": "Notes",
                "autoWidth": true
            },
            {
                "data": null,
                "sortable": false,
                "render": function (data, type, row) {

                    let formAction = `${$PrefixHostName}/${_mainController}/@nameof(TmCharityBoxCollectController.TmCharityBoxCollectForm)`;
                    let DeleteAction = `${$PrefixHostName}/${_mainController}/@nameof(TmCharityBoxCollectController.Delete)`;

                    let formTitle = '@ERP.ResourcePack.CharityBoxes.TmCharityBoxCollect.Title';
                    let btns = '';

                    if (_permissions.includes(_postPermission) && row.StatusLkpId == _newStatus) {
                         btns += `<a href="javascript:void(0)" onclick="PostAjax(${row.Id})" title="@ERP.ResourcePack.Common.Settings.Post"><i class="mx-2 fas fa-check-circle text-info"></i></a>`;
                    }

                    if (_permissions.includes(_updatePermission) && row.StatusLkpId == _newStatus ) {
                        btns += `<a href="${$PrefixHostName}/TmCharityBoxCollect/FormView?id=${row.EncId}&t=@encUpdateTrigger" title="@ERP.ResourcePack.Common.Settings.Edit"><i class="mx-2 fas fa-edit text-info"></i></a>`;
                    }

                    btns += `<a href="${$PrefixHostName}/TmCharityBoxCollect/FormView?id=${row.EncId}&t=@encShowTrigger" title="@ERP.ResourcePack.Common.Settings.Show"><i class="mx-2 fas fa-eye text-info"></i></a>`;

                    if (_permissions.includes(_deletePermission) && row.StatusLkpId == _newStatus) {
                        btns += `<a href="javascript:void(0)" onclick="AjaxController.DeleteMainTableRow(${row.Id},'${DeleteAction}');" title="@ERP.ResourcePack.Common.Settings.Delete"><i class="mx-2 fas fa-trash-alt text-danger"></i></a>`;
                    }

                    btns += `<a href="javascript:void(0);" onclick="return print('${$PrefixHostName}/TmCharityBoxCollect/PrintTmCharityBoxCollectScreen','${row.EncId}','${lang}')" title="@ERP.ResourcePack.Common.Settings.Print"><i class="mx-2 fas fa-print text-success"></i></a>`;

                    const _auditedPermission = '@PermissionNames.Pages_TmCharityBoxCollect_Audit';

                    if (_permissions.includes(_auditedPermission)) {

                        row.permission = _auditedPermission;

                        btns += GetAuditedButton(row);
                    }

                    return btns;
                }
            }
        ];

        const dtObj = {
            "processing": true,
            "serverSide": true,
            "filter": false,
            "orderMulti": false,
            "language": dataTableLang,
            "ajax": {
                "url": _loadDataUrl,
                "type": "POST",
                "datatype": "json",
                "data": params,
                "complete": function () {
                      _tblLoader.hide();
                }
            },
            "columns": columns,
            "initComplete": function () {
                $('[data-toggle="tooltip"]').tooltip();
            }

        };

        _tblSelector.dataTable().fnDestroy();
        _tblSelector.DataTable(dtObj).on('draw', function () { $('[data-toggle="tooltip"]').tooltip(); });

        setTimeout(function () {
            $(".sorting_1").removeAttr('colspan');
        }, 500);
    };

    $('#btnSubmition').on('click', function () {

        if ($('#mainForm').valid()) {

            $(this).prop('disabled', true);

            $('#submitLoader').show();

            $('#mainForm').submit();

        } else {
            $(this).prop('disabled', false);

            $('#submitLoader').hide();
        }

    });

    $('#mainForm #BankAccountId').select2(
        ReturnSelect2ObjectCustomParams(`${baseUrl}/ApBankAccounts/GetUserAccessedApBankAccountsSelect2`,
            { bankLkpId:@Convert.ToInt64(ERP.Front.Helpers.Enums.Common.FndBankLkpsTypes.Box)}));

    $('#searchBox #BankAccountId').select2(
        ReturnSelect2ObjectCustomParams(`${baseUrl}/ApBankAccounts/GetUserAccessedApBankAccountsSelect2`,
            { bankLkpId:@Convert.ToInt64(ERP.Front.Helpers.Enums.Common.FndBankLkpsTypes.Box)}));

    $('#searchBox #StatusLkpId').select2(ReturnSelect2ObjectForLkpsTypes('@ERP.Front.Helpers.Enums.Common.FndLkpsTypes.TmCharityBoxCollectStatus.ToString()'))

    $('#CharityBoxActionDetailId').select2({
        ajax: {
            url: `${baseUrl}/TmCharityBoxActions/GetCharityBoxActionDetailsForCollectSelect2`,
            dataType: 'json',
            headers: {
                'Authorization': `Bearer ${$_token}`
            },
            data: function (params) {
                params.page = params.page || 1;
                return {
                    pageSize: pageSize,
                    pageNumber: params.page,
                    searchTerm: params.term,
                    lang: lang
                };
            },
            processResults: function (data, params) {

                params.page = params.page || 1;

                return {
                    results: data.result.results,
                    pagination: {
                        more: (params.page * pageSize) < data.result.total
                    }
                };
            }
        },
        placeholder: select2Placeholder,
        minimumInputLength: 0,
        allowClear: true,
        language: select2Lang,
        templateSelection: function (data,container) {

            if (data.altText) {
                $('#CharityBoxName').val(data.altText.split('__')[0]);
                $('#SubLocation').val(data.altText.split('__')[1]);
            }

            return data.text;
        }
    });

    $('#TmCharityBoxCollectMemberId').select2({
        ajax: {
            url: `${baseUrl}/TmCharityBoxCollectMembers/GetSelect2`,
            dataType: 'json',
            headers: {
                'Authorization': `Bearer ${$_token}`
            },
            data: function (params) {
                params.page = params.page || 1;
                return {
                    pageSize: pageSize,
                    pageNumber: params.page,
                    searchTerm: params.term,
                    lang: lang
                };
            },
            processResults: function (data, params) {

                params.page = params.page || 1;

                return {
                    results: data.result.results,
                    pagination: {
                        more: (params.page * pageSize) < data.result.total
                    }
                };
            }
        },
        placeholder: select2Placeholder,
        minimumInputLength: 0,
        allowClear: true,
        language: select2Lang,
        templateSelection: function (data,contrinaer) {

            if (data.altText) {
                $('#MemberNumber').val(data.altText.split('__')[0]);
                $('#MemberCategory').val(data.altText.split('__')[1]);
            }

            return data.text;
        }
    });

    const print = function (url,id,lang) {
        const data = { id: id, lang : lang };
        openModal(data, url);
    };
</script>

<script>

    const coinsCatsSelectors = $('input[name*="Value"]');

    const coinsCats = coinsCatsSelectors.map((index, item) => item.name.replace('Value', ''));

    coinsCatsSelectors.on('keyup change', function (e) { calcTotal(); });

    const calcTotal = function () {

        let total = 0;

        for (let i = 0; i < coinsCats.length; i++) {

            const current = coinsCats[i];
            const currentInputVal = +($(`#Value${current}`).val());
            const currentCoEff = current.toLowerCase().includes('f') ? +(current.toLowerCase().replace('f', '')) : +(current.toLowerCase().replace('dh', ''));

            let operator = current.toLowerCase().includes('f') ? 100 : (current.toLowerCase().includes('dh') ? 1 : 1);

            total += (currentInputVal * currentCoEff / operator);

            $('#Total').val(total);
        }

    };

</script>

<script name="detailssssssssssss">

    const _tblTmCharityBoxCollectDetailSelector = $('#tblTmCharityBoxCollectDetail');
    const _listTmCharityBoxCollectDetail = $('#CharityBoxCollectDetailsListStr');

    let _TmCharityBoxCollectDetail = [], updatedRow, tblCounterIndex = 0 ;

    const fillDetail = function () {

        if (validator() === false) return;

        const current = {
            index: ++tblCounterIndex,
            charityBoxActionDetailId: $('#CharityBoxActionDetailId').find(':selected').val(),
            barCode: $('#CharityBoxActionDetailId').find(':selected').text(),
            charityBoxName: $('#CharityBoxName').val(),
            subLocation: $('#SubLocation').val(),
            rowStatus: NewStatus,
            id: 0
        };

        return current;
    };

    const AddTmCharityBoxCollectDetail = function () {

        const current = fillDetail();

        if (current === undefined) return;

        _TmCharityBoxCollectDetail.push(current);

        _listTmCharityBoxCollectDetail.val(JSON.stringify(_TmCharityBoxCollectDetail));

        bindTmCharityBoxCollectDetailTable();

        clearFormAdding();
    };

    const bindTmCharityBoxCollectDetailTable = function () {

        const detailArr = _TmCharityBoxCollectDetail.filter(z => z.rowStatus !== DeletedStatus);

        const columns = [
            { 'data': 'index' },
            { 'data': 'barCode' },
            { 'data': 'charityBoxName' },
            { 'data': 'subLocation' },
            {
                'data': null,
                'searchable': false,
                'ordering': false,
                'sorting': false,
                'render': function (d, t, row) {

                    let rows = '';

                    if (primaryEntityKeyId === 0 || trigger !== '@ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString()') {

                        rows += `<td><a href="javascript:void(0)" onclick="return DeleteTmCharityBoxCollectDetail(${row.index})"><i class="mx-2 fas fa-trash-alt text-danger"></i></a>`;
                        rows += `<a href="javascript:void(0)" onclick="return GetTmCharityBoxCollectDetailRow(${row.index})"><i class="mx-2 fas fa-edit text-success"></i></a></td>`;
                    }
                    else {
                        rows += '<td></td>';
                    }

                    return rows;
                }
            }
        ];

        const dtObj = {
            data: detailArr,
            retrieve: true,
            language: dataTableLang,
            columns: columns,
            drawCallback: function (c, v, b) {}
        };

        setTimeout(function () {

            _tblTmCharityBoxCollectDetailSelector.dataTable().fnDestroy();
            _tblTmCharityBoxCollectDetailSelector.DataTable(dtObj).on('draw', function () { $('[data-toggle="tooltip"]').tooltip(); });

        }, 100);

    };

    const DeleteTmCharityBoxCollectDetail = function (index)  {

        const current = _TmCharityBoxCollectDetail.find(z => z.index === index);

        const indexOfCurrent = _TmCharityBoxCollectDetail.indexOf(current);

        if (!current.id) {

           _TmCharityBoxCollectDetail.splice(indexOfCurrent, 1);

        } else {

            current.rowStatus = DeletedStatus;

           _TmCharityBoxCollectDetail.splice(indexOfCurrent, 1,current);
        }

        bindTmCharityBoxCollectDetailTable();

        _listTmCharityBoxCollectDetail.val(_TmCharityBoxCollectDetail.length === 0 ? '' : JSON.stringify(_TmCharityBoxCollectDetail));

    };

    const LoadTmCharityBoxCollectDetailData = function () {

        $.ajax({
            url: `${baseUrl}/TmCharityBoxCollect/GetAllDetails`,
            method: 'GET',
            headers: {
                        'Authorization': `Bearer ${$_token}`
            },
            data: {
                id: primaryEntityKeyId
            }
        }).done(function (data) {

            _TmCharityBoxCollectDetail = [...data.result];

            tblCounterIndex = 0;

            $.each(_TmCharityBoxCollectDetail, function (i, item) {
                item.index = ++tblCounterIndex;
            });

            bindTmCharityBoxCollectDetailTable();

            _listTmCharityBoxCollectDetail.val(JSON.stringify(_TmCharityBoxCollectDetail));

        });

    };

    const GetTmCharityBoxCollectDetailRow = function (tblIndex) {

        clearFormAdding();

        $('#btnAddDetailRow').hide();
        $('#btnUpdateDetailRow').show();
        $('#btnCancelDetailRow').show();

        const current = _TmCharityBoxCollectDetail.find(z => z.index === tblIndex);

        $(`#CharityBoxActionDetailId`).append($("<option selected='selected'></option>")
            .val(current.charityBoxActionDetailId).text(current.barCode)).trigger('change');

        $('#CharityBoxName').val(current.charityBoxName);
        $('#SubLocation').val(current.subLocation);

        updatedRow = current;
    };

    const UpdateTmCharityBoxCollectDetailRow = function () {

        let current = _TmCharityBoxCollectDetail.find(z => z.index === updatedRow.index);

        let indexOfCurrent = _TmCharityBoxCollectDetail.indexOf(_TmCharityBoxCollectDetail.find(z => z.index === updatedRow.index));

        const newRow = fillDetail();

        if (newRow === undefined) return;

        newRow.index = current.index;
        newRow.id = updatedRow.id;
        newRow.statusLkpId = updatedRow.statusLkpId;
        newRow.rowStatus =  !updatedRow.id ? NewStatus : UpdatedStatus;

        _TmCharityBoxCollectDetail.splice(indexOfCurrent, 1,newRow);

        $('#btnAddDetailRow').show();
        $('#btnUpdateDetailRow').hide();
        $('#btnCancelDetailRow').hide();

        clearFormAdding();

        _listTmCharityBoxCollectDetail.val(JSON.stringify(_TmCharityBoxCollectDetail));

        setTimeout(function () {
            bindTmCharityBoxCollectDetailTable();
        }, 100);
    };

    const clearFormAdding = function () {
        $('#details .card:first input,textarea').val('');
        $('#details .card:first select').val('').trigger('change');
    };

    const validator = function () {

        if (!$('#CharityBoxActionDetailId').find(':selected').val()) {
            toastr.warning('@TmCharityBoxCollect.TmCharityBoxCollectMemberId' + ' : ' + '@ERP.ResourcePack.Common.Settings.Required');
            return false;
        }

    };

</script>

<script name="members">

    const _tblTmCharityBoxCollectMemberSelector = $('#tblTmCharityBoxCollectMember');
    const _listTmCharityBoxCollectMember = $('#CharityBoxCollectMembersListStr');

    let _TmCharityBoxCollectMember = [], updatedMemberRow, tblMemberCounterIndex = 0 ;

    const fillMembersDetail = function () {

        if (validatorMembers() === false) return;

        const current = {
            index: ++tblMemberCounterIndex,
            tmCharityBoxCollectMemberId: $('#TmCharityBoxCollectMemberId').find(':selected').val(),
            memberName: $('#TmCharityBoxCollectMemberId').find(':selected').text(),
            memberNumber: $('#MemberNumber').val(),
            memberCategory: $('#MemberCategory').val(),
            rowStatus: NewStatus,
            id: 0
        };

        return current;
    };

    const AddTmCharityBoxCollectMember = function () {

        const current = fillMembersDetail();

        if (current === undefined) return;

        _TmCharityBoxCollectMember.push(current);

        _listTmCharityBoxCollectMember.val(JSON.stringify(_TmCharityBoxCollectMember));

        bindTmCharityBoxCollectMemberTable();

        clearFormMemberAdding();
    };

    const bindTmCharityBoxCollectMemberTable = function () {

        const detailArr = _TmCharityBoxCollectMember.filter(z => z.rowStatus !== DeletedStatus);

        const columns = [
            { 'data': 'index' },
            { 'data': 'memberNumber' },
            { 'data': 'memberName' },
            { 'data': 'memberCategory' },
            {
                'data': null,
                'searchable': false,
                'ordering': false,
                'sorting': false,
                'render': function (d, t, row) {

                    let rows = '';

                    if (primaryEntityKeyId === 0 || trigger !== '@ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString()') {

                        rows += `<td><a href="javascript:void(0)" onclick="return DeleteTmCharityBoxCollectMember(${row.index})"><i class="mx-2 fas fa-trash-alt text-danger"></i></a>`;
                        rows += `<a href="javascript:void(0)" onclick="return GetTmCharityBoxCollectMemberRow(${row.index})"><i class="mx-2 fas fa-edit text-success"></i></a></td>`;
                    }
                    else {
                        rows += '<td></td>';
                    }

                    return rows;
                }
            }
        ];

        const dtObj = {
            data: detailArr,
            retrieve: true,
            language: dataTableLang,
            columns: columns,
            drawCallback: function (c, v, b) {}
        };

        setTimeout(function () {

            _tblTmCharityBoxCollectMemberSelector.dataTable().fnDestroy();
            _tblTmCharityBoxCollectMemberSelector.DataTable(dtObj).on('draw', function () { $('[data-toggle="tooltip"]').tooltip(); });

        }, 100);

    };

    const DeleteTmCharityBoxCollectMember = function (index)  {

        const current = _TmCharityBoxCollectMember.find(z => z.index === index);

        const indexOfCurrent = _TmCharityBoxCollectMember.indexOf(current);

        if (!current.id) {

           _TmCharityBoxCollectMember.splice(indexOfCurrent, 1);

        } else {

            current.rowStatus = DeletedStatus;

           _TmCharityBoxCollectMember.splice(indexOfCurrent, 1,current);
        }

        bindTmCharityBoxCollectMemberTable();

        _listTmCharityBoxCollectMember.val(_TmCharityBoxCollectMember.length === 0 ? '' : JSON.stringify(_TmCharityBoxCollectMember));

    };

    const LoadTmCharityBoxCollectMemberData = function () {

        $.ajax({
            url: `${baseUrl}/TmCharityBoxCollect/GetAllMembersDetails`,
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${$_token}`
            },
            data: {
                id: primaryEntityKeyId
            }
        }).done(function (data) {

            _TmCharityBoxCollectMember = [...data.result];

            tblMemberCounterIndex = 0;

            $.each(_TmCharityBoxCollectMember, function (i, item) {
                item.index = ++tblMemberCounterIndex;
            });

            bindTmCharityBoxCollectMemberTable();

            _listTmCharityBoxCollectMember.val(JSON.stringify(_TmCharityBoxCollectMember));

        });

    };

    const GetTmCharityBoxCollectMemberRow = function (tblIndex) {

        clearFormMemberAdding();

        $('#btnAddDetailMemberRow').hide();
        $('#btnUpdateDetailMemberRow').show();
        $('#btnCancelDetailMemberRow').show();

        const current = _TmCharityBoxCollectMember.find(z => z.index === tblIndex);

        $(`#TmCharityBoxCollectMemberId`).append($("<option selected='selected'></option>")
            .val(current.tmCharityBoxCollectMemberId).text(current.memberName)).trigger('change');

        $('#MemberNumber').val(current.memberNumber);
        $('#MemberCategory').val(current.memberCategory);

        updatedMemberRow = current;
    };

    const UpdateTmCharityBoxCollectMemberRow = function () {

        let current = _TmCharityBoxCollectMember.find(z => z.index === updatedMemberRow.index);

        let indexOfCurrent = _TmCharityBoxCollectMember.indexOf(_TmCharityBoxCollectMember.find(z => z.index === updatedMemberRow.index));

        const newRow = fillMembersDetail();

        if (newRow === undefined) return;

        newRow.index = current.index;
        newRow.id = updatedMemberRow.id;
        newRow.rowStatus =  !updatedMemberRow.id ? NewStatus : UpdatedStatus;

        _TmCharityBoxCollectMember.splice(indexOfCurrent, 1,newRow);

        $('#btnAddDetailMemberRow').show();
        $('#btnUpdateDetailMemberRow').hide();
        $('#btnCancelDetailMemberRow').hide();

        clearFormMemberAdding();

        _listTmCharityBoxCollectMember.val(JSON.stringify(_TmCharityBoxCollectMember));

        setTimeout(function () {
            bindTmCharityBoxCollectMemberTable();
        }, 100);
    };

    const clearFormMemberAdding = function () {
        $('#members .card:first input,textarea').val('');
        $('#members .card:first select').val('').trigger('change');
    };

    const validatorMembers = function () {

        if (!$('#TmCharityBoxCollectMemberId').find(':selected').val()) {
            toastr.warning('@TmCharityBoxCollect.TmCharityBoxCollectMemberId' + ' : ' + '@ERP.ResourcePack.Common.Settings.Required');
            return false;
        }

    };

</script>