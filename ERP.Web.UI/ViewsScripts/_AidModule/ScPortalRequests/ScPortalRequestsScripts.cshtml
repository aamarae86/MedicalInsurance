@using ERP.ResourcePack.AidModule
@using ERP.Web.UI.Controllers.AidModule
@using ERP.Authorization;
@{
    string encUpdateTrigger = ERP.Front.Helpers.Enums.Common.EncUpdate;
    string encShowTrigger = ERP.Front.Helpers.Enums.Common.EncShow;
    string permissionsStr = TempData["Permissions"]?.ToString() ?? string.Empty;
}

@if (permissionsStr.Contains(PermissionNames.Pages_ScPortalRequests_Post))
{
    <script>
        const PostAjax = function (id) {

            bootbox.confirm({
                message: _booBoxMessagePosting,
                buttons: bootBoxDefaultBtns,
                callback: function (result) {

                    if (result) {

                        const data = {
                            id: id,
                            lang: lang,
                            userId: 0
                        };

                        $.ajax({
                            url: `${baseUrl}/ScPortalRequest/PostPortalRequest`,
                            type: 'POST',
                            data: JSON.stringify(data),
                            headers:
                            {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${$_token}`
                            },
                        }).done(function (response) {

                            if (response.result.finalStatues == 'F') {
                                toastr.warning(response.result.reason);
                            }
                            else {
                                toastr.success(response.result.reason);

                                if (formView) {

                                    setTimeout(function () {
                                        window.location.href = $PrefixHostName + '/ScPortalRequests';
                                    }, 100);

                                } else {
                                    LoadDataGrid();
                                }
                            }

                        }).fail(function (response) {
                            toastr.error(response.responseText);
                        });

                    }

                }
            });


        };

        const UnPostAjax = function (id) {

            bootbox.confirm({
                message: _booBoxMessagePosting,
                buttons: bootBoxDefaultBtns,
                callback: function (result) {

                    if (result) {

                        const data = {
                            id: id,
                            lang: lang,
                            userId: 0
                        };

                        $.ajax({
                            url: `${baseUrl}/ScPortalRequest/UnPostScPortalRequests`,
                            type: 'POST',
                            data: JSON.stringify(data),
                            headers:
                            {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${$_token}`
                            },
                        }).done(function (response) {

                            if (response.result.finalStatues == 'F') {
                                toastr.warning(response.result.reason);
                            }
                            else {
                                toastr.success(response.result.reason);

                                if (formView) {

                                    setTimeout(function () {
                                        window.location.href = $PrefixHostName + '/ScPortalRequests';
                                    }, 100);

                                } else {
                                    LoadDataGrid();
                                }
                            }

                        }).fail(function (response) {
                            toastr.error(response.responseText);
                        });

                    }

                }
            });


        };

        const RefuseAjax = function (id) {

            bootbox.confirm({
                message: _booBoxMessageRefusing,
                buttons: bootBoxDefaultBtns,
                callback: function (result) {

                    if (result) {

                        const data = {
                            id: id,
                            lang: lang,
                            userId: 0
                        };

                        $.ajax({
                            url: `${baseUrl}/ScPortalRequest/RefusePortalRequest`,
                            type: 'POST',
                            data: JSON.stringify(data),
                            headers:
                            {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${$_token}`
                            },
                        }).done(function (response) {

                            console.log(response);

                            if (response.result.finalStatues == 'F') {
                                toastr.warning(response.result.reason);
                            }
                            else {
                                toastr.success(response.result.reason);

                                if (formView) {

                                    setTimeout(function () {
                                        window.location.href = $PrefixHostName + '/ScPortalRequests';
                                    }, 100);

                                } else {
                                    LoadDataGrid();
                                }
                            }
                        }).fail(function (response) {
                            toastr.error(response.responseText);
                        });

                    }

                }
            });


        };

    </script>
}
else
{
    <script>
        const PostAjax = function (id) { };
        const UnPostAjax = function (id) { };
        const RefuseAjax = function (id) { };
    </script>
}

<script>
    const _mainController = "ScPortalRequests", _apiAppService = "ScPortalRequest";

    $(function () {
        LoadDataGrid();

        $('#btnAddAttachmentRow').remove();

        if (_permissions == "") {
            $('#Home').addClass('menu-toggle waves-effect waves-block toggled');
        }
        else {
            $('#ScPortalRequests').addClass('active');
        }

        $('#MonthlyIncomeAmount').prop('type', 'number').prop('min', '0');
        $('#MonthlyOutcomeAmount').prop('type', 'number').prop('min', '0');

        $('.timepicker').bootstrapMaterialDatePicker({
            format: 'HH:mm',
            clearButton: false,
            date: false
        });

    });

    const _loadDataUrl = `${$PrefixHostName}/${_mainController}/@nameof(ScPortalRequestsController.LoadDataGrid)`;
    const _tblSelector = $('#tblScPortalRequests');
    const _tblLoader = $('#tblLoader');
    const _mainForm = $('#mainForm');
    const _PostStatus = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.ScPortalRequests.Posted);
    const _RefusedStatus = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.ScPortalRequests.Refused);
    const _NewStatus = @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.ScPortalRequests.New);

    const _permissions = '@permissionsStr';
    const _updatePermission = '@PermissionNames.Pages_ScPortalRequests_Update';
    const _deletePermission = '@PermissionNames.Pages_ScPortalRequests_Delete';
    const _postPermission = '@PermissionNames.Pages_ScPortalRequests_Post';

    let tblHeadersAdded = false;

    $('#btnSubmition').on('click', function () {

        let validator = 0;

        __attachmentsArr.forEach(function (item, index) {
            if (item.isRequired && !item.filePath) validator++;
        });

        if (validator > 0) {
            toastr.warning('@ScPortalRequests.PleaseUploadRequiredFiles');
            return;
        }

        _mainForm.submit();

        if (_mainForm.valid()) {

            $(this).prop('disabled', true);
            $('.page-loader-wrapper').show();

        } else {
            $(this).prop('disabled', false);
            $('.page-loader-wrapper').hide();
        }

    });

    var OnBegin = function (response) {
        fireBtnLoader();
    };

    var OnSuccess = function (response) {

        if (response.success) {

            if (response.customRestResult.trigger === '@ERP.Front.Helpers.Enums.Common.FormTriggers.Insert') {

                toastr.success(response.customRestResult.message);

                setTimeout(function () {
                    window.location.href = $PrefixHostName + '/ScPortalRequests';
                }, 200);

            } else if (response.customRestResult.trigger === '@ERP.Front.Helpers.Enums.Common.FormTriggers.Update') {

                toastr.success(response.customRestResult.message);

                setTimeout(function () {
                    window.location.href = $PrefixHostName + '/ScPortalRequests';
                }, 200);
            }

        } else {
            $('#btnSubmition').prop('disabled',false);
            toastr.error(response.customRestResult.message);
        }

    };

    var OnComplete = function (response) {
        downBtnLoader();
    };

    var OnFailure = function (response) {
        toastr.error(response);
        $('#btnSubmition').prop('disabled',false);
    };

    const LoadDataGrid = function () {

        $('#tblLoader').show();

        const parms = {
            SourceLkpId: $('#searchBox #SourceLkpId').find(':selected').val(),
            PortalUsersId: $('#searchBox #PortalUsersId').find(':selected').val(),
            StatusLkpId: $('#searchBox #StatusLkpId').find(':selected').val(),
            AidRequestTypeId: $('#searchBox #AidRequestTypeId').find(':selected').val(),
            ResearcherId: $('#searchBox #ResearcherId').find(':selected').val(),
            PortalRequestNumber:$('#searchBox #PortalRequestNumber').val(),
            FromDate:$('#searchBox #FromDate').val(),
            ToDate:$('#searchBox #ToDate').val()
        };

        const columns = [
            {
                "data": "result.data.id",
                'render': function (data, type, row, meta) {
                    return meta.row + meta.settings._iDisplayStart + 1;
                }
            },
            {
                "data": "PortalRequestNumber",
                "name": "PortalRequestNumber",
                "autoWidth": true
            },
             {
                "data": null,
                "autoWidth": true,
                "render": function (d, t, row) {

                    if (row.AidRequestType == null)
                        return '';

                    if (lang === 'ar-EG')
                        return row.AidRequestType.NameAr;

                    return row.AidRequestType.NameEn;
                }
            },
             {
                "data": null,
                "autoWidth": true,
                "render": function (d, t, row) {

                    if (row.PortalUser == null)
                        return '';
                    return row.PortalUser.Name;
                }
            },
             {
                "data": null,
                "autoWidth": true,
                "render": function (d, t, row) {

                    if (row.PortalUser == null)
                        return '';
                    return row.PortalUser.IdNumber;
                }
            },
            {
                "data": "PortalRequestDate",
                "name": "PortalRequestDate",
                "autoWidth": true
            },
            {
                "data": null,
                "autoWidth": true,
                "render": function (d, t, row) {

                    if (row.FndLookupValuesStatusLkp == null) return '';

                    if (lang === 'ar-EG') {

                        if (row.StatusLkpId == 159) {
                            return `<a style="text-decoration:underline" href="javascript:void(0);" onclick="return OpenModalDecision('${row.FinalDecision}')">${row.FndLookupValuesStatusLkp.NameAr }  <i class="text-warning fas fa-info-circle"></i> </a>`;
                        }

                        return row.FndLookupValuesStatusLkp.NameAr;
                    } else {

                        if (row.StatusLkpId == 159) {
                            return `<a style="text-decoration:underline" href="javascript:void(0);" onclick="return OpenModalDecision('${row.FinalDecision}')">${row.FndLookupValuesStatusLkp.NameEn }  <i class="text-warning fas fa-info-circle"></i> </a>`;
                        }

                        return row.FndLookupValuesStatusLkp.NameEn;
                    }
                 }
            },
            {
                "data": null,
                "sortable": false,
                "render": function (data, type, row) {

                    let formAction = `${$PrefixHostName}/${_mainController}/@nameof(ScPortalRequestsController.ScPortalRequestsForm)`;
                    let DeleteAction = `${$PrefixHostName}/${_mainController}/@nameof(ScPortalRequestsController.Delete)`;

                    let btns = '';

                    if (_permissions.includes(_postPermission) & row.StatusLkpId == _NewStatus) {
                         btns += `<a href="javascript:void(0)" onclick="PostAjax(${row.Id})" title="@ERP.ResourcePack.Common.Settings.Post"><i class="mx-2 fas fa-check-circle text-info"></i></a>`;
                    }

                    if (_permissions.includes(_postPermission) & (row.StatusLkpId == 150||row.StatusLkpId == 151)) {
                        btns += `<a href="javascript:void(0)" onclick="UnPostAjax(${row.Id})" title="@ERP.ResourcePack.Common.Settings.UnPost"><i class="mx-2 fas fa-check-circle text-danger"></i></a>`;
                    }

                    if (_permissions.includes(_postPermission) & row.StatusLkpId == _NewStatus) {
                         btns += `<a href="javascript:void(0)" onclick="RefuseAjax(${row.Id})" title="@ERP.ResourcePack.Common.Settings.Refuse"><i class="mx-2 fas fa-minus-circle text-danger"></i></a>`;
                    }

                    if (_permissions.includes(_updatePermission) && row.StatusLkpId == _NewStatus){
                        btns += `<a href="${$PrefixHostName}/ScPortalRequests/FormView?id=${row.EncId}&t=@encUpdateTrigger" title="@ERP.ResourcePack.Common.Settings.Edit"><i class="mx-2 fas fa-edit text-info"></i></a>`;
                    }

                    btns += `<a href="${$PrefixHostName}/ScPortalRequests/FormView?id=${row.EncId}&t=@encShowTrigger" title="@ERP.ResourcePack.Common.Settings.Show"><i class="mx-2 fas fa-eye text-info"></i></a>`;

                    if (_permissions.includes(_deletePermission) && row.StatusLkpId == _NewStatus) {
                        btns += `<a href="javascript:void(0)" onclick="AjaxController.DeleteMainTableRow(${row.Id},'${DeleteAction}');" title="@ERP.ResourcePack.Common.Settings.Delete"><i class="mx-2 fas fa-trash-alt text-danger"></i></a>`;
                    }

                    const _auditedPermission = '@PermissionNames.Pages_ScPortalRequests_Audit';

                    if (_permissions.includes(_auditedPermission)) {

                        row.permission = _auditedPermission;

                        btns += GetAuditedButton(row);
                    }

                    return btns;
                }
            }
        ];

        const dtObj = {
            "processing": true,
            "serverSide": true,
            "filter": false,
            "orderMulti": false,
            "language": dataTableLang,
            "ajax": {
                "url": _loadDataUrl,
                "type": "POST",
                "datatype": "json",
                "data": parms,
                "complete": function () {
                    _tblLoader.hide();
                }
            },
            "columns": columns,
            "initComplete": function () {
                $('[data-toggle="tooltip"]').tooltip();
            }

        };

        _tblSelector.dataTable().fnDestroy();
        _tblSelector.DataTable(dtObj).on('draw', function () { $('[data-toggle="tooltip"]').tooltip(); });

        setTimeout(function () {
            $(".sorting_1").removeAttr('colspan');
        }, 500);
    };

    $('#searchBox #StatusLkpId').select2(ReturnSelect2ObjectForLkpsTypes('@ERP.Front.Helpers.Enums.Common.FndLkpsTypes.ScPortalRequestStatues.ToString()'));

    $('#searchBox #SourceLkpId').select2(ReturnSelect2ObjectForLkpsTypes('@ERP.Front.Helpers.Enums.Common.FndLkpsTypes.ScPortalRequestSource.ToString()'));

    $('#searchBox #AidRequestTypeId').select2(ReturnSelect2ObjectDefault(`${baseUrl}/ScFndAidRequestType/GetAidRequestTypeLkp`));

    $('#AidRequestTypeId').select2(ReturnSelect2ObjectDefault(`${baseUrl}/ScFndAidRequestType/GetAidRequestTypeLkp`));

    $('#searchBox #PortalUsersId').select2(ReturnSelect2ObjectDefault(`${baseUrl}/PortalUserData/GetUnifiedPortalUsersFromPortalUsersDataSelect2`));

    $('#PortalUsersId').select2(ReturnSelect2ObjectDefault(`${baseUrl}/PortalUserData/GetUnifiedPortalUsersFromPortalUsersDataSelect2`));

    $('#searchBox #ResearcherId').select2(ReturnSelect2ObjectDefault(`${baseUrl}/User/GetUsersSelect2`));

    $('#ResearcherId').select2(ReturnSelect2ObjectDefault(`${baseUrl}/User/GetUsersSelect2`));

</script>

<script>

    const OpenModalDecision = function (txt) {

        _mainModalBody.html(`<h2 style="background:#114D7D" class="alert alert-info text-center">${txt !='null' ? txt : '----'}</h2>`);
        _mainModal.modal(_mainModalOprions);

    };

    const calcNetValue = function () {

        let sumIncomes = 0,sumDuties = 0;

        _IncomesArr.map(item => sumIncomes += parseFloat(item.monthlyIncomeAmount));

        _DutiesArr.map(item => sumDuties += parseFloat(item.monthlyAmount));

        const total = sumIncomes + sumDuties;

        const netVal = sumIncomes - sumDuties;

        $('#MonthlyIncomeAmountTotal').val(sumIncomes);

        $('#MonthlyOutcomeAmountTotal').val(sumDuties);

        $('#Total').val(total);

        $('#NetValue').val(netVal);

        $('#MonthlyIncomeAmountTotal').parent('.form-line').addClass('focused');

        $('#MonthlyOutcomeAmountTotal').parent('.form-line').addClass('focused');

        $('#Total').parent('.form-line').addClass('focused');

        $('#NetValue').parent('.form-line').addClass('focused');

    };

    const validateDateFilter = function () {

        if (Date.parse($('#FromDate').val()) > Date.parse($('#ToDate').val())) {

            toastr.warning('@ERP.ResourcePack.Common.Settings.DateValidation');

            $('#FromDate').val('');
            $('#ToDate').val('');
        };
    };

    $('#PortalUsersId').on('change', function () {

        $.ajax({
            url: `${baseUrl}/PortalUserData/GetPortalUserInfo?Id=${$(this).find(':selected').val()}`,
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${$_token}`
            }
        }).done(function (data) {

            fillTextBoxsUsersInfo(data.result);

        });

    });

    const BindPortalUserInfo = function () {

        $.ajax({
            url: `${baseUrl}/PortalUserData/GetPortalUserInfo?Id=${$('#PortalUsersId').find(':selected').val()}`,
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${$_token}`
            }
        }).done(function (data) {

            fillTextBoxsUsersInfo(data.result);

        });

    };

    const fillTextBoxsUsersInfo = function (obj) {

        if (statusLkpId == _NewStatus &&  sourceLkpId != @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.ScPortalRequestsSource.Portal)) {

                _DutiesArr = [...obj.userDuties];
                _IncomesArr = [...obj.userIncomes];

                tblDutiesCounterIndex = tblIncomesCounterIndex = 0;

                $.each(_DutiesArr, function (i, item) {
                   item.index = ++tblDutiesCounterIndex;
                });

                $.each(_IncomesArr, function (i, item) {
                   item.index = ++tblIncomesCounterIndex;
                });

                bindDutiesTable();
                bindIncomesTable();

                calcNetValue();
        }

        $('#IdExpirationDate').val(obj.idExpirationDate.split('T')[0]);
        $('#IdExpirationDate').parent('.form-line').addClass('focused');

        $('#IdNumber').val(obj.idNumber);
        $('#IdNumber').parent('.form-line').addClass('focused');

        $('#Region').val(obj.region);
        $('#Region').parent('.form-line').addClass('focused');

        $('#IdNumberWifeHusband1').val(obj.idNumberWifeHusband1);
        $('#IdNumberWifeHusband1').parent('.form-line').addClass('focused');

        $('#WifeHusbandName1').val(obj.wifeHusbandName1);
        $('#WifeHusbandName1').parent('.form-line').addClass('focused');

        $('#WifeName2').val(obj.wifeName2);
        $('#WifeName2').parent('.form-line').addClass('focused');

        $('#IdNumberWife2').val(obj.idNumberWife2);
        $('#IdNumberWife2').parent('.form-line').addClass('focused');

        $('#WifeName3').val(obj.wifeName3);
        $('#WifeName3').parent('.form-line').addClass('focused');

        $('#IdNumberWife3').val(obj.idNumberWife3);
        $('#IdNumberWife3').parent('.form-line').addClass('focused');

        $('#WifeName4').val(obj.wifeName4);
        $('#WifeName4').parent('.form-line').addClass('focused');

        $('#IdNumberWife4').val(obj.idNumberWife4);
        $('#IdNumberWife4').parent('.form-line').addClass('focused');

        $('#MobileNumber1').val(obj.mobileNumber1);
        $('#MobileNumber1').parent('.form-line').addClass('focused');

        if (primaryEntityKeyId == 0) {
            $('#MobileNumber').val($('#MobileNumber1').val());
            $('#MobileNumber').parent('.form-line').addClass('focused');
        }

        $('#MobileNumber2').val(obj.mobileNumber2);
        $('#MobileNumber2').parent('.form-line').addClass('focused');

        $('#JobDescription').val(obj.jobDescription);
        $('#JobDescription').parent('.form-line').addClass('focused');

        $('#Address').val(obj.address);
        $('#Address').parent('.form-line').addClass('focused');

        $('#JobWifeHusband1').val(obj.jobWifeHusband1);
        $('#JobWifeHusband1').parent('.form-line').addClass('focused');

        $('#JobWife2').val(obj.jobWife2);
        $('#JobWife2').parent('.form-line').addClass('focused');

        $('#JobWife3').val(obj.jobWife3);
        $('#JobWife3').parent('.form-line').addClass('focused');

        $('#JobWife4').val(obj.jobWife4);
        $('#JobWife4').parent('.form-line').addClass('focused');

        $('#PassportNumber').val(obj.passportNumber);
        $('#PassportNumber').parent('.form-line').addClass('focused');

        $('#UnifiedNumber').val(obj.unifiedNumber);
        $('#UnifiedNumber').parent('.form-line').addClass('focused');

        $('#PassportIssueDate').val(obj.passportIssueDate ? obj.passportIssueDate.split('T')[0] : '');
        $('#PassportIssueDate').parent('.form-line').addClass('focused');

        $('#PassportExpiryDate').val(obj.passportExpiryDate ? obj.passportExpiryDate.split('T')[0] : '');
        $('#PassportExpiryDate').parent('.form-line').addClass('focused');

        $('#ResidenceEndDate').val(obj.residenceEndDate ? obj.residenceEndDate.split('T')[0] : '');
        $('#ResidenceEndDate').parent('.form-line').addClass('focused');

        $('#Nationality').val(lang === 'ar-EG' ? obj.nationalityFndLookupValues.nameAr : obj.nationalityFndLookupValues.nameEn);
        $('#Nationality').parent('.form-line').addClass('focused');

        $('#MaritalStatus').val(lang === 'ar-EG' ? obj.maritalStatusFndLookupValues.nameAr : obj.maritalStatusFndLookupValues.nameEn);
        $('#MaritalStatus').parent('.form-line').addClass('focused');

        $('#City').val(lang === 'ar-EG' ? obj.cityFndLookupValues.nameAr : obj.cityFndLookupValues.nameEn);
        $('#City').parent('.form-line').addClass('focused');

        if (obj.qualificationFndLookupValues) {
            $('#Qualification').val(lang === 'ar-EG' ? obj.qualificationFndLookupValues.nameAr : obj.qualificationFndLookupValues.nameEn);
            $('#Qualification').parent('.form-line').addClass('focused');
        }

    };

    $('#AidRequestTypeId').on('change', function () {

        $.ajax({
            url: `${baseUrl}/ScFndProtalAttachmentSetting/GetAttachmentSettingByAidType?aidTypeId=${$(this).find(':selected').val()}`,
            method: 'GET',
            headers: { 'Authorization': `Bearer ${$_token}` }
        }).done(function (data) {

            drawFileUploader( data.result);

        }).fail(function (e) { });

    });

</script>

<script name="attchsss">

    const _tblAttachmentsSelector = $('#tblAttachmentDetail');
    const _tblAttachmentsSelectorBody = $('#tblAttachmentDetail tbody');
    const _listAttachments = $('#ListAttachments');

    let __attachmentsArr = [], updatedAttachsRow;

    const drawFileUploader = function (list) {

        __attachmentsArr = [];

        let markup = '';

        $.each(list, function (index, item) {

            const imgId = `img-req-${index}`;

            markup += '<tr>';

            markup += `<th>${lang === 'ar-EG' ? item.attachmentNameAr : item.attachmentNameEn} ${item.isRequired ? '**' : ''}</th>`;
            markup += `<th><img id="${imgId}" src="${item.filePath ? item.filePath : ''}" class="img-thumbnail" style="width:80px;height:80px" alt="no-image" /></th>`;

            if (primaryEntityKeyId == 0  || trigger !== '@ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString()') {
                markup += `<td><a href="javascript:void(0)" onclick="return GetAttachsRow(${index})"><i class="mx-2 fas fa-plus-circle text-info"></i></a></td>`;
                markup += `<td><a href="javascript:void(0)" onclick="return DeleteAttachRow(${index})"><i class="mx-2 fas fa-trash-alt text-danger"></i></a></td>`;
            }

            if (item.filePath) {
                markup += `<th><a target="_blank" href="${item.filePath}" download=${lang === 'ar-EG' ? item.attachmentNameAr : item.attachmentNameEn}><i class="fas fa-download"></i></a></th>`;
            }

            markup += '</tr>';

            const currentItem = {
                index: index,
                imgSelector: imgId,
                filePath: item.id ? item.filePath : '',
                rowStatus: item.id ? NoActionStatus : NewStatus,
                fileName: lang === 'ar-EG' ? item.attachmentNameAr : item.attachmentNameEn,
                isRequired: item.isRequired,
                protalAttachmentSettingId: item.id,
                id: item.attchId ? item.attchId : 0
            };

            fillAttachsRow(currentItem);

            _tblAttachmentsSelectorBody.html(markup);

        });
    };

    const fillAttachsRow = function (currentItem) {

        __attachmentsArr.push(currentItem);

        _listAttachments.val(JSON.stringify(__attachmentsArr));
    };

    const GetAttachsRow = function (tblIndex) {

        $('#attachmentFormContainer').show();

        const current = __attachmentsArr.find(z => z.index === tblIndex);

        $('#btnAddAttachmentRow').hide();
        $('#btnUpdateAttachmentRow').show();
        $('#btnCancelAttachmentRow').show();

        $('#btnUpdateAttachmentRow').attr('onclick', 'UpdateAttachsRow()')
        $('#btnCancelAttachmentRow').attr('onclick', 'ClearAttachs()')

        $('#AttachmentName').val(current.fileName);
        $('#AttachmentName').attr('disabled',true);
        $('#AttachmentName').parent('.form-line').addClass('focused');

        updatedAttachsRow = current;
    };

    const UpdateAttachsRow = function () {

        let current = __attachmentsArr.find(z => z.index === updatedAttachsRow.index);

        let indexOfCurrent = __attachmentsArr.indexOf(current);

        const newRow = {
            index: current.index,
            filePath: $('#FilePathAttachment').val(),
            fileName: current.fileName,
            imgSelector: current.imgSelector,
            isRequired: current.isRequired,
            protalAttachmentSettingId: current.protalAttachmentSettingId,
            rowStatus: (updatedAttachsRow.id ? UpdatedStatus : NewStatus),
            id: updatedAttachsRow.id
        };

        updatedAttachsRow = undefined;

        __attachmentsArr.splice(indexOfCurrent, 1, newRow);

        $('#btnAddAttachmentRow').show();
        $('#btnUpdateAttachmentRow').hide();
        $('#btnCancelAttachmentRow').hide();

        _listAttachments.val(JSON.stringify(__attachmentsArr));

        $(`#${current.imgSelector}`).attr('src', newRow.filePath);

        $('.file-path').val('');

        $('#attachmentFormContainer').hide();
        $('#FilePathAttachment').val('')
    };

    const ClearAttachs = function () {

        $('#AttachmentName').val('');
        $('.file-path').val('');
        $('#attachmentFormContainer').hide();
    };

    const DeleteAttachRow = function (index) {

        const current = __attachmentsArr.find(item => item.index === index);

        const indexOfCurrent = __attachmentsArr.indexOf(current);

        if (!current.id) {

            current.filePath = '';

            __attachmentsArr.splice(indexOfCurrent, 1, current);

        } else {

            current.rowStatus = DeletedStatus;

            __attachmentsArr.splice(indexOfCurrent, 1, current);
        }

        $(`#${current.imgSelector}`).attr('src', '');

        _listAttachments.val(__attachmentsArr.length === 0 ? '' : JSON.stringify(__attachmentsArr));

    };

    const LoadAttachmentsData = function () {

        $.ajax({
            url: `${baseUrl}/ScPortalRequest/GetAllAttachmentsDetails`,
            method: 'GET',
            headers: { 'Authorization': `Bearer ${$_token}` },
            data: {
                id: primaryEntityKeyId,
                aidRequestId: aidRequestId
            }
        }).done(function (data) {

            drawFileUploader(data.result.map(z => z.getScFndProtalAttachmentSetting));

            _listAttachments.val(JSON.stringify(__attachmentsArr));

        });

    };

</script>

<script name="visitsss">

    const _tblVisitsSelector = $('#tblVisits');
    const _tblVisitsSelectorBody = $('#tblVisits tbody');
    const _listVisits = $('#ListScPortalRequestVisitedDetail');

    let  totalOfTotal  = 0,totalCheck = 0;
    let _visitsArr = [], tblLinesCounterIndex = 0 , updatedRow;

    const fillVisitsArr = function () {

        if (validateLines() === false)  return;

        const current = {
            index: ++tblLinesCounterIndex,
            visitDate:$('#VisitDate').val(),
            visitTime:$('#VisitTime').val(),
            mobileNumber: $('#MobileNumber').val(),
            visitStatusLkp: '@ERP.ResourcePack.AidModule.ScPortalRequests.NewStatus',
            rowStatus: NewStatus,
            id:0
        };

        return current;
    };

    const AddVisitsDetail = function () {

        if (fillVisitsArr() === undefined) return;

        _visitsArr.push(fillVisitsArr());

        _listVisits.val(JSON.stringify(_visitsArr));

        bindLinesTable();

        clearFormAdding();
    };

    const UpdateVisitsDetailRow = function () {

        let current = _visitsArr.find(z => z.index === updatedRow.index);

        let indexOfCurrent = _visitsArr.indexOf(_visitsArr.find(z => z.index === updatedRow.index));

        if (fillVisitsArr() === undefined) return;

        const newRow = fillVisitsArr();

        newRow.id = updatedRow.id;
        newRow.visitStatusLkpId = updatedRow.visitStatusLkpId;
        newRow.PortalRequestId = updatedRow.PortalRequestId;
        newRow.rowStatus = (updatedRow.id === undefined || updatedRow.id == null || updatedRow.id == 0) ? NewStatus : UpdatedStatus;

        _visitsArr.splice(indexOfCurrent, 1,newRow);

        $('#btnAddVisitsRow').show();
        $('#btnUpdateVisitsRow').hide();
        $('#btnCancelVisitsRow').hide();

        clearFormAdding();

        _listVisits.val(JSON.stringify(_visitsArr));

        bindLinesTable();
    };

    const bindLinesTable = function () {

        let rows = '';

        const detailArr = _visitsArr.filter(z => z.rowStatus !== DeletedStatus);

        $.each(detailArr, function (i, item) {

            rows += '<tr>';
            rows += `<td>${item.index}</td>`;
            rows += `<td>${item.visitDate}</td>`;
            rows += `<td>${item.visitTime}</td>`;
            rows += `<td>${item.mobileNumber}</td>`;
            rows += `<td>${item.visitStatusLkp}</td>`;

            if (primaryEntityKeyId === 0 || trigger !== '@ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString()') {
                rows += `<td><a href="javascript:void(0)" onclick="return DeleteRowLine(${item.index})"><i class="mx-2 fas fa-trash-alt text-danger"></i></a>`;
                rows += `<a href="javascript:void(0)" onclick="return GetRow(${item.index})"><i class="mx-2 fas fa-edit text-success"></i></a></td>`;
            } else {
                rows += '<td></td>';
            }

            rows += '</tr>';
        });

        setTimeout(function () {
            _tblVisitsSelectorBody.html(rows);
        }, 100);
    };

    const DeleteRowLine= function (index) {

        const current = _visitsArr.find(z => z.index === index);

        const indexOfCurrent = _visitsArr.indexOf(current);

        if (current.id === undefined || current.id == null || current.id == 0) {

           _visitsArr.splice(indexOfCurrent, 1);

        } else {

            current.rowStatus = DeletedStatus;

           _visitsArr.splice(indexOfCurrent, 1,current);
        }

        bindLinesTable();

        _listVisits.val(_visitsArr.length === 0 ? '' : JSON.stringify(_visitsArr));
    };

    const LoadVisitsData = function () {

        $('#tblLoaderLine').show();

        $.ajax({
            url: `${baseUrl}/ScPortalRequest/GetAllVisitsDetails`,
            method: 'GET',
            headers: {  'Authorization': `Bearer ${$_token}`  },
            data: { id: primaryEntityKeyId }
        }).done(function (data) {

            _visitsArr = [...data.result];

            tblLinesCounterIndex = 0;

            $.each(_visitsArr, function (i, item) {
                item.index = ++tblLinesCounterIndex;
            });

            bindLinesTable();

            _listVisits.val(JSON.stringify(_visitsArr));

            $('#tblLoaderLine').hide();
        });

    };

    const GetRow = function (tblIndex) {

        clearFormAdding();

        $('#btnAddVisitsRow').hide();
        $('#btnUpdateVisitsRow').show();
        $('#btnCancelVisitsRow').show();

        const current = _visitsArr.find(z => z.index === tblIndex);

        $('#visits #VisitDate').val(current.visitDate);
        $('#visits #VisitTime').val(current.visitTime);
        $('#visits #MobileNumber').val(current.mobileNumber);

        $('#visits #VisitDate').parent('.form-line').addClass('focused');
        $('#visits #VisitTime').parent('.form-line').addClass('focused');
        $('#visits #MobileNumber').parent('.form-line').addClass('focused');

        updatedRow = current;
    };

    const clearFormAdding = function () {

        $('#visits .card select').val('').trigger('change');
        $('#visits .card input').val('');
        $('#visits .card textarea').val('');

        $('#details .card input').val('');

    };

    const validateLines = function () {

        if ($('#visits #VisitDate').val() === '') {
            toastr.warning('@ScPortalRequests.VisitDate' + ' : ' + '@ERP.ResourcePack.Common.Settings.Required')
            return false;
        }

        if ($('#visits #VisitTime').val() === '') {
            toastr.warning('@ScPortalRequests.VisitTime' + ' : ' + '@ERP.ResourcePack.Common.Settings.Required')
            return false;
        }

        if ($('#visits #MobileNumber').val() === '') {
            toastr.warning('@ScPortalRequests.MobileNumber' + ' : ' + '@ERP.ResourcePack.Common.Settings.Required')
            return false;
        }

        return true;
    };

</script>

<script name="Incomesss">

    const _tblIncomesSelector = $('#tblIncomes');
    const _tblIncomesSelectorBody = $('#tblIncomes tbody');
    const _listIncomes = $('#IncomesListStr');

    let _IncomesArr = [], tblIncomesCounterIndex = 0 , updatedIncomesRow;

    const fillIncomesArr = function () {

        if (validateIncomes() === false)  return;

        const current = {
            index: ++tblIncomesCounterIndex,
            incomeSourceName: $('#IncomeSourceName').val(),
            monthlyIncomeAmount:$('#MonthlyIncomeAmount').val(),
            rowStatus: NewStatus,
            id:0
        };

        return current;
    };

    const AddIncomesDetail = function () {

        const current = fillIncomesArr();

        if (current === undefined) return;

        _IncomesArr.push(current);

        _listIncomes.val(JSON.stringify(_IncomesArr));

        bindIncomesTable();

        clearFormAddingIncomes();

        calcNetValue();
    };

    const UpdateIncomesDetailRow = function () {

        let current = _IncomesArr.find(z => z.index === updatedIncomesRow.index);

        let indexOfCurrent = _IncomesArr.indexOf(current);

        const newRow = fillIncomesArr();

        if (newRow === undefined) return;

        newRow.id = updatedIncomesRow.id;
        newRow.rowStatus = !updatedIncomesRow.id ? NewStatus : UpdatedStatus;

        _IncomesArr.splice(indexOfCurrent, 1,newRow);

        $('#btnAddIncomesRow').show();
        $('#btnUpdateIncomesRow').hide();
        $('#btnCancelIncomesRow').hide();

        clearFormAddingIncomes();

        _listIncomes.val(JSON.stringify(_IncomesArr));

        bindIncomesTable();

        calcNetValue();
    };

    const bindIncomesTable = function () {

        let rows = '';

        const detailArr = _IncomesArr.filter(z => z.rowStatus !== DeletedStatus);

        $.each(detailArr, function (i, item) {

            rows += '<tr>';
            rows += `<td>${item.index}</td>`;
            rows += `<td>${item.incomeSourceName}</td>`;
            rows += `<td>${item.monthlyIncomeAmount}</td>`;

            if (sourceLkpId == @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.ScPortalRequestsSource.Portal) && (primaryEntityKeyId === 0 || trigger !== '@ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString()')) {
                rows += `<td><a href="javascript:void(0)" onclick="return DeleteRowIncomes(${item.index})"><i class="mx-2 fas fa-trash-alt text-danger"></i></a>`;
                rows += `<a href="javascript:void(0)" onclick="return GetIncomeRow(${item.index})"><i class="mx-2 fas fa-edit text-success"></i></a></td>`;
            } else {
                rows += '<td></td>';
            }

            rows += '</tr>';
        });

        setTimeout(function () {
            _tblIncomesSelectorBody.html(rows);
        }, 100);
    };

    const DeleteRowIncomes= function (index) {

        const current = _IncomesArr.find(z => z.index === index);

        const indexOfCurrent = _IncomesArr.indexOf(current);

        if (!current.id) {

           _IncomesArr.splice(indexOfCurrent, 1);

        } else {

            current.rowStatus = DeletedStatus;

           _IncomesArr.splice(indexOfCurrent, 1,current);
        }

        bindIncomesTable();

        _listIncomes.val(_IncomesArr.length === 0 ? '' : JSON.stringify(_IncomesArr));

        calcNetValue();
    };

    const LoadIncomesData = function () {

         $.ajax({
            url: `${baseUrl}/ScPortalRequest/GetAllIncomesDetails`,
            method: 'GET',
            headers: {  'Authorization': `Bearer ${$_token}`  },
            data: { id: primaryEntityKeyId }
        }).done(function (data) {

            _IncomesArr = [...data.result];

            tblIncomesCounterIndex = 0;

            $.each(_IncomesArr, function (i, item) {
                item.index = ++tblIncomesCounterIndex;
            });

            bindIncomesTable();

            _listIncomes.val(JSON.stringify(_IncomesArr));

            calcNetValue();
         });

    };

    const GetIncomeRow = function (tblIndex) {

        clearFormAddingIncomes();

        $('#btnAddIncomesRow').hide();
        $('#btnUpdateIncomesRow').show();
        $('#btnCancelIncomesRow').show();

        const current = _IncomesArr.find(z => z.index === tblIndex);

        $('#Incomes #IncomeSourceName').val(current.incomeSourceName);
        $('#Incomes #MonthlyIncomeAmount').val(current.monthlyIncomeAmount);

        $('#Incomes #IncomeSourceName').parent('.form-line').addClass('focused');
        $('#Incomes #MonthlyIncomeAmount').parent('.form-line').addClass('focused');

        updatedIncomesRow = current;
    };

    const clearFormAddingIncomes = function () {

        $('#Incomes .card select').val('').trigger('change');
        $('#Incomes .card input').val('');
        $('#Incomes .card textarea').val('');
    };

    const validateIncomes = function () {

        if ($('#Incomes #IncomeSourceName').val() === '') {
            toastr.warning('@ScPortalRequests.IncomeSourceName' + ' : ' + '@ERP.ResourcePack.Common.Settings.Required')
            return false;
        }

        if ($('#Incomes #MonthlyIncomeAmount').val() === '') {
            toastr.warning('@ScPortalRequests.MonthlyIncomeAmount' + ' : ' + '@ERP.ResourcePack.Common.Settings.Required')
            return false;
        }

        return true;
    };

</script>

<script name="Dutiesss">

    const _tblDutiesSelector = $('#tblDuties');
    const _tblDutiesSelectorBody = $('#tblDuties tbody');
    const _listDuties = $('#DutiesListStr');

    let _DutiesArr = [], tblDutiesCounterIndex = 0 , updatedDutiesRow;

    const fillDutiesArr = function () {

        if (validateDuties() === false)  return;

        const current = {
            index: ++tblDutiesCounterIndex,
            dutyType: $('#DutyType').val(),
            dutyDescription:$('#DutyDescription').val(),
            monthlyAmount: $('#MonthlyAmount').val(),
            totalAmount:$('#TotalAmount').val(),
            rowStatus: NewStatus,
            id:0
        };

        return current;
    };

    const AddDutiesDetail = function () {

        const current = fillDutiesArr();

        if (current === undefined) return;

        _DutiesArr.push(current);

        _listDuties.val(JSON.stringify(_DutiesArr));

        bindDutiesTable();

        clearFormAddingDuties();

        calcNetValue();
    };

    const UpdateDutiesDetailRow = function () {

        let current = _DutiesArr.find(z => z.index === updatedDutiesRow.index);

        let indexOfCurrent = _DutiesArr.indexOf(current);

        const newRow = fillDutiesArr();

        if (newRow === undefined) return;

        newRow.id = updatedDutiesRow.id;
        newRow.rowStatus = !updatedDutiesRow.id ? NewStatus : UpdatedStatus;

        _DutiesArr.splice(indexOfCurrent, 1,newRow);

        $('#btnAddDutiesRow').show();
        $('#btnUpdateDutiesRow').hide();
        $('#btnCancelDutiesRow').hide();

        clearFormAddingDuties();

        _listDuties.val(JSON.stringify(_DutiesArr));

        bindDutiesTable();

        calcNetValue();
    };

    const bindDutiesTable = function () {

        let rows = '';

        const detailArr = _DutiesArr.filter(z => z.rowStatus !== DeletedStatus);

        $.each(detailArr, function (i, item) {

            rows += '<tr>';
            rows += `<td>${item.index}</td>`;
            rows += `<td>${item.dutyType}</td>`;
            rows += `<td>${item.dutyDescription}</td>`;
            rows += `<td>${item.monthlyAmount}</td>`;
            rows += `<td>${item.totalAmount}</td>`;

            if (sourceLkpId == @Convert.ToInt64(ERP.Front.Helpers.Enums.Common.ScPortalRequestsSource.Portal) && (primaryEntityKeyId === 0 || trigger !== '@ERP.Front.Helpers.Enums.Common.FormTriggers.Show.ToString()')) {
                rows += `<td><a href="javascript:void(0)" onclick="return DeleteRowDuties(${item.index})"><i class="mx-2 fas fa-trash-alt text-danger"></i></a>`;
                rows += `<a href="javascript:void(0)" onclick="return GetDutiesRow(${item.index})"><i class="mx-2 fas fa-edit text-success"></i></a></td>`;
            } else {
                rows += '<td></td>';
            }

            rows += '</tr>';
        });

        setTimeout(function () {
            _tblDutiesSelectorBody.html(rows);
        }, 100);
    };

    const DeleteRowDuties= function (index) {

        const current = _DutiesArr.find(z => z.index === index);

        const indexOfCurrent = _DutiesArr.indexOf(current);

        if (!current.id) {

           _DutiesArr.splice(indexOfCurrent, 1);

        } else {

            current.rowStatus = DeletedStatus;

           _DutiesArr.splice(indexOfCurrent, 1,current);
        }

        bindDutiesTable();

        _listDuties.val(_DutiesArr.length === 0 ? '' : JSON.stringify(_DutiesArr));

        calcNetValue();
    };

    const LoadDutiesData = function () {

         $.ajax({
            url: `${baseUrl}/ScPortalRequest/GetAllDutiesDetails`,
            method: 'GET',
            headers: {  'Authorization': `Bearer ${$_token}`  },
            data: { id: primaryEntityKeyId }
        }).done(function (data) {

            _DutiesArr = [...data.result];

            tblDutiesCounterIndex = 0;

            $.each(_DutiesArr, function (i, item) {
                item.index = ++tblDutiesCounterIndex;
            });

            bindDutiesTable();

            _listDuties.val(JSON.stringify(_DutiesArr));

            calcNetValue();
         });

    };

    const GetDutiesRow = function (tblIndex) {

        clearFormAddingDuties();

        $('#btnAddDutiesRow').hide();
        $('#btnUpdateDutiesRow').show();
        $('#btnCancelDutiesRow').show();

        const current = _DutiesArr.find(z => z.index === tblIndex);

        $('#Duties #DutyType').val(current.dutyType);
        $('#Duties #TotalAmount').val(current.totalAmount);
        $('#Duties #DutyDescription').val(current.dutyDescription);
        $('#Duties #MonthlyAmount').val(current.monthlyAmount);

        $('#Duties #TotalAmount').parent('.form-line').addClass('focused');
        $('#Duties #DutyType').parent('.form-line').addClass('focused');
        $('#Duties #MonthlyAmount').parent('.form-line').addClass('focused');
        $('#Duties #DutyDescription').parent('.form-line').addClass('focused');

        updatedDutiesRow = current;
    };

    const clearFormAddingDuties = function () {

        $('#Duties .card select').val('').trigger('change');
        $('#Duties .card input').val('');
        $('#Duties .card textarea').val('');
    };

    const validateDuties = function () {

        if ($('#Duties #DutyType').val() === '') {
            toastr.warning('@ScPortalRequests.DutyType' + ' : ' + '@ERP.ResourcePack.Common.Settings.Required')
            return false;
        }


        if ($('#Duties #MonthlyAmount').val() === '') {
            toastr.warning('@ScPortalRequests.MonthlyAmount' + ' : ' + '@ERP.ResourcePack.Common.Settings.Required')
            return false;
        }

        return true;
    };

</script>
